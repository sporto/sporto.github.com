<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sebastian's Blog]]></title>
  <link href="http://sporto.github.com/atom.xml" rel="self"/>
  <link href="http://sporto.github.com/"/>
  <updated>2014-07-08T11:23:21+10:00</updated>
  <id>http://sporto.github.com/</id>
  <author>
    <name><![CDATA[Sebastian Porto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Avoiding Memory Leaks With CanJS]]></title>
    <link href="http://sporto.github.com/blog/2014/03/20/avoiding-memory-leaks-with-canjs/"/>
    <updated>2014-03-20T22:58:14+11:00</updated>
    <id>http://sporto.github.com/blog/2014/03/20/avoiding-memory-leaks-with-canjs</id>
    <content type="html"><![CDATA[<p>Avoiding Memory leaks with CanJS</p>

<p>If you are building a single page application memory leaks can be a real problem, specially if you are application is meant to stay on the screen for long periods of time without the user refreshing it.</p>

<p>In this post I want to show how you can effectively avoid these leaks when developing with CanJS.</p>

<h2>Example</h2>

<p>For example the following control creates two potential memory leaks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Control</span> <span class="o">=</span> <span class="nx">can</span><span class="p">.</span><span class="nx">Control</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">ele</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// # 1</span>
</span><span class='line'>      <span class="nb">window</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;resize&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// ... do something on resize</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// # 2</span>
</span><span class='line'>      <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// ... do some polling</span>
</span><span class='line'>      <span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the control is initialised, we are listening to the window resize event (#1) and creating a timeout (#2). Everything is fine until the control is removed from the DOM.</p>

<p>When the element is removed from the DOM we will end up with a ghost object still listening for the resize event and still running an interval, even if there is nothing in the DOM.</p>

<p>If we don&rsquo;t unbind the events properly the browser doesn&rsquo;t have a way to know that our control object should be garbage collected. We have created a memory leak.</p>

<p>This gets even worst if we have an application that adds and removes a control several times, which is normal in an application with multiple views. In that case we just keep piling ghost objects potentially consuming a lot of memory and creating strange bugs as we have multiple unintended objects listening to the same events.</p>

<h2>The CanJS way</h2>

<p>Getting rid of the first memory leak is quite easy in CanJS, instead of binding the event manually like shown above, you use the special CanJS syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Control</span> <span class="o">=</span> <span class="nx">can</span><span class="p">.</span><span class="nx">Control</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">ele</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="s1">&#39;{window} resize&#39;</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//... do something on resize</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>{window} resize</code> declaration tells CanJS to listen for the event we want but unbinding it automatically when the control is destroyed.</p>

<h2>The destroy method</h2>

<p>The second leak has to be removed a bit more manually:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Control</span> <span class="o">=</span> <span class="nx">can</span><span class="p">.</span><span class="nx">Control</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">ele</span><span class="p">,</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">interval</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// ... do some polling </span>
</span><span class='line'>      <span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">destroy</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">removeInterval</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">interval</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need to manually remove the interval in the <code>destroy</code> method of our control, the good thing is that we don&rsquo;t need to call this <code>destroy</code> method manually if we follow the correct pattern below.</p>

<h2>Destroying a control</h2>

<p>CanJS will destroy a control automatically when its element is removed from the DOM. But you have to be sure that the element is removed, not just reused.</p>

<p>For example, this wouldn&rsquo;t work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Create a control using an existing element in the DOM</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">controlA</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ControlA</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;existing-element&#39;</span><span class="p">),</span> <span class="p">{});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Later reuse the element for a different control</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">controlB</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ControlB</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;existing-element&#39;</span><span class="p">),</span> <span class="p">{});</span>
</span><span class='line'><span class="c1">// This will not call destroy() on controlA</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the other hand, removing the element first will give us the behaviour we expect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Create a document fragment first </span>
</span><span class='line'><span class="c1">// this will be used as the element for the new control</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create the control, and pass the newly created element fragment</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">controlA</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ControlA</span><span class="p">(</span><span class="nx">view</span><span class="p">,</span> <span class="p">{});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Append that newly created element to our container</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.my-app&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">view</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Later when replacing this control make sure to remove the element first</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.my-app&#39;</span><span class="p">).</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Removing the control element will automatically call .destroy on your control</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Repeat the process for the new control</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">controlB</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ControlB</span><span class="p">(</span><span class="nx">view</span><span class="p">,</span> <span class="p">{});</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.my-app&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">view</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>By removing the elements entirely from the DOM, CanJS will trigger <code>destroy</code> and unbind the events. So that&rsquo;s it, avoiding memory leaks is quite straight forward when following the right patterns.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Form Validations With CanJS]]></title>
    <link href="http://sporto.github.com/blog/2014/03/04/form-validations-with-canjs/"/>
    <updated>2014-03-04T23:29:30+11:00</updated>
    <id>http://sporto.github.com/blog/2014/03/04/form-validations-with-canjs</id>
    <content type="html"><![CDATA[<p>During my time using CanJS I haven&rsquo;t found a canonical way of doing form validations with it, so here I want to share the way I am doing them at the moment.</p>

<p>First let&rsquo;s start with a model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="nx">can</span><span class="p">.</span><span class="nx">Map</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">validatePresenceOf</span><span class="p">(</span><span class="s1">&#39;firstName&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">validatePresenceOf</span><span class="p">(</span><span class="s1">&#39;lastName&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">},</span> <span class="p">{});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This model is using the <a href="http://canjs.com/docs/can.Map.validations.html">validation plug-in</a> to mix-in the validation functions.</p>

<p>Then we need a control:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Control</span> <span class="o">=</span> <span class="nx">can</span><span class="p">.</span><span class="nx">Control</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">ele</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">errors</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">can</span><span class="p">.</span><span class="nx">Map</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="p">{</span><span class="nx">person</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">person</span><span class="p">,</span> <span class="nx">errors</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">};</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="nx">can</span><span class="p">.</span><span class="nx">view</span><span class="p">(</span><span class="s1">&#39;view&#39;</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">view</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="s1">&#39;form submit&#39;</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// get errors from person if any</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">errors</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">person</span><span class="p">.</span><span class="nx">errors</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// pass the errors to our errors observable</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">errors</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="nx">errors</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">errors</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">errors</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// proceed to saving here</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note how I create a errors can.Map and pass it to the view. This map will allow me to show any validation errors to the user. In form submit we retrieve the errors from the form (using the validation plug-in) and pass those errors to the errors can.Map.</p>

<p>Our view looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/mustache&quot;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;view&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">form</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">label</span> <span class="k">for</span><span class="o">=</span><span class="s2">&quot;first_name&quot;</span><span class="o">&gt;</span><span class="nx">First</span> <span class="nx">Name</span><span class="o">:&lt;</span><span class="err">/label&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">can</span><span class="o">-</span><span class="nx">value</span><span class="o">=</span><span class="s1">&#39;person.firstName&#39;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;first_name&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>      <span class="p">{{</span><span class="nx">showErrors</span> <span class="nx">errors</span> <span class="s1">&#39;firstName&#39;</span><span class="p">}}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">br</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">label</span> <span class="k">for</span><span class="o">=</span><span class="s2">&quot;last_name&quot;</span><span class="o">&gt;</span><span class="nx">Last</span> <span class="nx">Name</span><span class="o">:&lt;</span><span class="err">/label&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">can</span><span class="o">-</span><span class="nx">value</span><span class="o">=</span><span class="s1">&#39;person.lastName&#39;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;last_name&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>      <span class="p">{{</span><span class="nx">showErrors</span> <span class="nx">errors</span> <span class="s1">&#39;lastName&#39;</span><span class="p">}}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">br</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;Save&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/form&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the <code>showErrors</code> helper. Which looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Mustache</span><span class="p">.</span><span class="nx">registerHelper</span><span class="p">(</span><span class="s1">&#39;showErrors&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">errors</span><span class="p">,</span> <span class="nx">prop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">attr</span> <span class="o">=</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="nx">prop</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">attr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">prop</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">attr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This helper will display the error an error to the user if there is any.</p>

<p>Here is a <a href="http://jsbin.com/jofeq/5/edit?html,js,output">fiddle</a> with a complete example.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Filtered Lists in CanJS]]></title>
    <link href="http://sporto.github.com/blog/2014/03/04/creating-filtered-lists-in-canjs/"/>
    <updated>2014-03-04T21:56:00+11:00</updated>
    <id>http://sporto.github.com/blog/2014/03/04/creating-filtered-lists-in-canjs</id>
    <content type="html"><![CDATA[<p>Here is a simple tutorial on how to build a filtered list in CanJS. For example, lets say that we have a list of people and we want to display people that have birthdays this month.</p>

<p>Our mustache template would like something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script type="text/mustache" id="view"&gt;
</span><span class='line'>  &lt;h2&gt;Birthday this month&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>  &lt;ul&gt; 
</span><span class='line'>      {{#birthdayThisMonth people}}
</span><span class='line'>          &lt;li&gt;{{name}} - {{birthdate}}&lt;/li&gt;
</span><span class='line'>      {{/birthdayThisMonth}}
</span><span class='line'>  &lt;/ul&gt;
</span><span class='line'>&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>people</code> is a CanJS model list , <code>birthdayThisMonth</code> is a Mustache helper. This Mustache helper looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">birthdayThisMonth</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">people</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">person</span><span class="p">,</span> <span class="nx">bd</span><span class="p">,</span> <span class="nx">bdMonth</span><span class="p">,</span> <span class="nx">thisMonth</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">people</span> <span class="o">&amp;&amp;</span> <span class="nx">people</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">a</span> <span class="o">&lt;</span> <span class="nx">people</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">a</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">person</span> <span class="o">=</span> <span class="nx">people</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span>
</span><span class='line'>          <span class="nx">bd</span> <span class="o">=</span> <span class="nx">person</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;birthdate&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">bdMonth</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">bd</span><span class="p">).</span><span class="nx">getMonth</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">thisMonth</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">).</span><span class="nx">getMonth</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">bdMonth</span> <span class="o">===</span> <span class="nx">thisMonth</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// we want to display this birthday</span>
</span><span class='line'>              <span class="c1">// so add this to the array</span>
</span><span class='line'>              <span class="c1">// options.fn is a function that will return the final string using the mustache template</span>
</span><span class='line'>              <span class="nx">res</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">fn</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="c1">// we have an array, but we need to return a string</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we just need to pass the helper to the view (or declare it as global helper):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">helpers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">birthdayThisMonth</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(...)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="nx">can</span><span class="p">.</span><span class="nx">view</span><span class="p">(</span><span class="s1">&#39;view&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">people</span><span class="o">:</span> <span class="nx">people</span><span class="p">},</span> <span class="nx">helpers</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>JsBin <a href="http://jsbin.com/moriq/1/edit?html,js,output">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Dependency Injection in Ruby]]></title>
    <link href="http://sporto.github.com/blog/2013/09/25/simple-dependency-injection/"/>
    <updated>2013-09-25T21:12:00+10:00</updated>
    <id>http://sporto.github.com/blog/2013/09/25/simple-dependency-injection</id>
    <content type="html"><![CDATA[<p>Some time ago I read the book <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">Practical Object-Oriented Design in Ruby</a> by Sandi Metz, while an excellent book there is one thing that bothered me while reading it.</p>

<p>That is the pattern for dependecy injection proposed on the book. It goes something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Car</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialise</span><span class="p">(</span><span class="n">engine</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@engine</span> <span class="o">=</span> <span class="n">engine</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">start</span>
</span><span class='line'>      <span class="n">engine</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">car</span> <span class="o">=</span> <span class="no">Car</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">engine</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example the class Car takes an <code>engine</code> dependecy, each time you want to create a car you have to pass an engine to it. This can easily become a cumbersome way of instantiating objects because you need to know a lot about your object just to create them. In this case I need to know that Car takes an engine and specifically which engine depending on the type of car I want to create.</p>

<p>To deal with this the suggested solution is to use an <strong>injector</strong>. See the definition in <a href="http://en.wikipedia.org/wiki/Dependency_injection">wikipedia</a>. The injector is in charge of creating the instances you need and injecting the right dependecies.</p>

<p>Although this is a powerful pattern I believe it mostly an unnecessary complication, specially in dynamic languages like ruby. Let me explain why.</p>

<h2>What do we want to achieve with DI?</h2>

<p>The main reason for using DI is to be able to swap the dependencies of an object at run time, this is mostly useful for testing. To achieve this there is a dead simple way to do it without having to deal with the complexity of injectors.</p>

<h2>The simple way to do it</h2>

<p>Instead of passing the dependecy when instantiating an object, we can simply let the object have default dependecies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Car</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">attr_writer</span> <span class="ss">:engine</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">start</span>
</span><span class='line'>      <span class="n">engine</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">engine</span>
</span><span class='line'>      <span class="vi">@engine</span> <span class="o">||=</span> <span class="no">Engine</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">car</span> <span class="o">=</span> <span class="no">Car</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we just create a car we get a default engine for it, so we don&rsquo;t need to bother with injectors.</p>

<p>What do we gain:</p>

<ul>
<li>External code doesn&rsquo;t need to know about the internals of our objects</li>
<li>We have sane default dependecies</li>
<li>We can easily swap the dependecies at run time</li>
</ul>


<p>In your test you can simply do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">car</span> <span class="o">=</span> <span class="no">Car</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">car</span><span class="o">.</span><span class="n">engine</span> <span class="o">=</span> <span class="no">FakeEngine</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">car</span><span class="o">.</span><span class="n">start</span>
</span></code></pre></td></tr></table></div></figure>


<p>So that&rsquo;s it, <strong>DI doesn&rsquo;t have to be complicated at all in ruby</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comparing Concurrency in Node and Go]]></title>
    <link href="http://sporto.github.com/blog/2013/08/18/concurrency-node-vs-go/"/>
    <updated>2013-08-18T07:40:00+10:00</updated>
    <id>http://sporto.github.com/blog/2013/08/18/concurrency-node-vs-go</id>
    <content type="html"><![CDATA[<p>The <a href="http://golang.org/">Go programming language</a> has capture my attention lately. There are several things I really like about:</p>

<ul>
<li>Simplicity: Go is a small language but still very flexible, I appreciate this simplicity as it can be learnt fairly quick.</li>
<li>Static typing: I like knowing that my code is correct without having to write a bunch of test you to deal with the lack of static typing.</li>
<li>No classes: Instead of classes Go simply uses interfaces to determine what objects has what methods, I personally find this a flexible and powerful approach.</li>
<li>Concurrency primitives: Go has baked in all the necessary language constructs for dealing with concurrency in a clean and coherent way.</li>
</ul>


<p>As part of learning Go I wanted to compare how concurrency compares to Node. For this I created a simple prototype that captures a common pattern:</p>

<p><img src="https://docs.google.com/drawings/d/1I-CqdRyXtQ0ZVFPh1kn8-jVC3jWMRgVYmv6EIH2NDxk/pub?w=486&amp;h=216"></p>

<ul>
<li>Fetch two values from different urls in parallel.</li>
<li>When those two values have arrived, send them together to another url.</li>
</ul>


<h2>The Server</h2>

<p>I made a simple Node server for this. <a href="https://gist.github.com/sporto/6258909#file-server-js">The code is here</a>. This server has the following API:</p>

<ul>
<li><a href="http://localhost:8080/x">http://localhost:8080/x</a> => returns &ldquo;Hello&rdquo;</li>
<li><a href="http://localhost:8080/y">http://localhost:8080/y</a> => returns &ldquo;World&rdquo;</li>
<li><a href="http://localhost:8080/concat?x=value&amp;y=value">http://localhost:8080/concat?x=value&amp;y=value</a> => takes two values and returns them concatenated</li>
</ul>


<h2>The Node Client</h2>

<p>For the Node code I am using promises, <a href="https://gist.github.com/sporto/6258909#file-client-js">here is the complete client code in JavaScript</a>.</p>

<p>Note the following lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Q</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;q&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">defX</span> <span class="o">=</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span> <span class="c1">// will be resolved when x arrives</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">defY</span> <span class="o">=</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span> <span class="c1">// will be resolved when y arrives</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">oneAndTwo</span> <span class="o">=</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">defX</span><span class="p">.</span><span class="nx">promise</span><span class="p">,</span> <span class="nx">defY</span><span class="p">.</span><span class="nx">promise</span><span class="p">]).</span><span class="nx">then</span><span class="p">(</span><span class="nx">processConcat</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">baseUrl</span> <span class="o">=</span> <span class="s2">&quot;http://localhost:8080&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">request</span><span class="p">(</span><span class="nx">baseUrl</span> <span class="o">+</span> <span class="s1">&#39;/x&#39;</span><span class="p">,</span> <span class="nx">makeValueHandler</span><span class="p">(</span><span class="nx">defX</span><span class="p">));</span>
</span><span class='line'><span class="nx">request</span><span class="p">(</span><span class="nx">baseUrl</span> <span class="o">+</span> <span class="s1">&#39;/y&#39;</span><span class="p">,</span> <span class="nx">makeValueHandler</span><span class="p">(</span><span class="nx">defY</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>I create two deferreds: defX and defY. Then I create a promise that is the combination of defX and defY.</p>

<p>Immediately after that I make the first two calls to the server in parallel. When those to calls are done the deferreds will be resolved and the function <code>processConcat</code> will be called with the results (in the correct order).</p>

<p>The JavaScript code is not complex but is not completely straightforward either, you still need to scan up and down when reading the source code to understand exactly what is happening.</p>

<h2>The Go Client</h2>

<p>The complete client in <a href="https://gist.github.com/sporto/6258909#file-client-go">Go is here</a>.</p>

<p>The key lines of code are below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">cx</span> <span class="kd">chan</span> <span class="kt">string</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">cy</span> <span class="kd">chan</span> <span class="kt">string</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">go</span> <span class="nx">getValue</span><span class="p">(</span><span class="s">&quot;/x&quot;</span><span class="p">,</span> <span class="nx">cx</span><span class="p">)</span>
</span><span class='line'><span class="k">go</span> <span class="nx">getValue</span><span class="p">(</span><span class="s">&quot;/y&quot;</span><span class="p">,</span> <span class="nx">cy</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">x</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">cx</span>
</span><span class='line'><span class="nx">y</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">cy</span>
</span><span class='line'>
</span><span class='line'><span class="nx">processConcat</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we create two channels (a way of communicating when using concurrent processes in Go), one for value x and the other for value y.</p>

<p>Immediately after that we fetch the values from the server but using the special <code>go</code> keyword. This means that those call will be made in their own processes so they will not block. These two requests happen in parallel.</p>

<p>The next two lines wait for the results of the API calls, the results are communicated using the channels.</p>

<p>The Go code looks a lot like typical sync code but still it is all happing in parallel thanks to the goroutines. So this code is as fast (event faster) than the Node version but simpler to understand IMO.</p>

<h2>Conclusion</h2>

<p>I am excited about Go, it has a lot to offer in multiple spaces. I will like to explore how something like Node Streams will look in Go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Safe Testing in Rails]]></title>
    <link href="http://sporto.github.com/blog/2013/06/27/safe-testing-in-rails/"/>
    <updated>2013-06-27T12:41:00+10:00</updated>
    <id>http://sporto.github.com/blog/2013/06/27/safe-testing-in-rails</id>
    <content type="html"><![CDATA[<p>There is a typical progression when developing an application. First we start with something simple, with a few models, things are simple to test. At this stage we can afford to build all the objects we need in our test without too much concern for speed and complexity.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="err">‘</span><span class="no">John</span><span class="err">’</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;has a name&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="err">‘</span><span class="no">John</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But soon things get complicated, we add more and more models to our application that depend on each other. Tests reflect this as well, we have to create a lot of objects in our tests to test simple things.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:english</span><span class="p">)</span> <span class="p">{</span> <span class="no">Language</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="err">‘</span><span class="no">English</span><span class="err">’</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:australia</span><span class="p">)</span> <span class="p">{</span> <span class="no">Location</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="err">‘</span><span class="no">Australia</span><span class="err">’</span><span class="p">,</span> <span class="ss">language</span><span class="p">:</span> <span class="err">‘</span><span class="n">english</span><span class="err">’</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:melbourne</span><span class="p">)</span> <span class="p">{</span> <span class="no">Location</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="err">‘</span><span class="no">Melbourne</span><span class="err">’</span><span class="p">,</span> <span class="ss">parent</span><span class="p">:</span> <span class="n">australia</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:office</span><span class="p">)</span> <span class="p">{</span> <span class="no">Workspace</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="err">‘</span><span class="no">Melbourne</span> <span class="no">Office</span><span class="err">’</span><span class="p">,</span> <span class="ss">location</span><span class="p">:</span> <span class="n">melbourne</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="err">‘</span><span class="no">John</span><span class="err">’</span><span class="p">,</span> <span class="ss">workspace</span><span class="p">:</span> <span class="n">office</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;has a language&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">default_language</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">english</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The example above creates all the objects that are needed to test <code>user.default_language</code>. We need to know a lot about our application just to run a test. Soon our test become a burden to write and very slow to run.</p>

<h2>Mocks, Stubs!</h2>

<p>It is evident that we are just doing too much in our test, we should just be creating the object we care about and mock the rest. Let&rsquo;s rewrite this using doubles and stubs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:english</span><span class="p">)</span> <span class="p">{</span> <span class="n">double</span><span class="o">.</span><span class="n">as_null_object</span><span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:office</span><span class="p">)</span> <span class="p">{</span> <span class="n">double</span><span class="o">.</span><span class="n">as_null_object</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="err">‘</span><span class="no">John</span><span class="err">’</span><span class="p">,</span> <span class="ss">workspace</span><span class="p">:</span> <span class="n">office</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">office</span><span class="p">(</span><span class="ss">:language</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="ss">:english</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;has a language&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">default_language</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">english</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is faster and simpler, we are just creating the object under test (user) and doubles for the other objects. We don’t need know about all the relationships in our application, just knowing the interface we care about in the objects directly related is enough. In this case just knowing that office responds to language is all we need.</p>

<p>But there is of course a problem. What happens in office doesn’t respond to language anymore? Say that someone changes <code>office.language</code> to <code>office.default_language</code>. Our test will still pass! <strong>We have created an alterative universe in our test.</strong></p>

<h2>Integration test</h2>

<p>Many experience developers will tell us that the solution to this conodrum is to have good integration test. That is partially true, integration tests are likely to fail when the interface between the objects is changed.</p>

<p>But guess what will happen? We will go and fix the integration test and then we will back to green. But wait, we forgot to fix the unit tests but everything passes! Unfortunatelly we cannot rely on due dilligence of people fixing all that should be fixed.</p>

<p>Now we are even in a worst situation, our tests are all green but our app is broken. <strong>So integration tests are not a reliable solution.</strong></p>

<p>Your application:</p>

<p><img src="http://www.3dm3.com/portfolio/files/1/4/7/7/5/9/broken_bridge__by_kash.jpg" alt="Broken bridge" /></p>

<h1>Safe mocking / stubbing</h1>

<p>We still want the benefits of lean, fast tests but without the dangers of alternative realities. So what is the solution?</p>

<p>I found that safe testing libraries are the best solution out there. This library will take care of checking that the methods you call actually exist in the mocked object. This frees us to still use doubles and stubs in our test without worring about the possibility of getting out of sync with the real application.</p>

<p>From all the libraries I have tried, (Bogus)[<a href="https://github.com/psyho/bogus">https://github.com/psyho/bogus</a>] is the most complete one. A test using Bogus will look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">fake</span><span class="p">(</span><span class="ss">:english</span><span class="p">)</span> <span class="p">{</span> <span class="no">Language</span><span class="p">}</span>
</span><span class='line'>  <span class="n">fake</span><span class="p">(</span><span class="ss">:office</span><span class="p">)</span> <span class="p">{</span> <span class="no">Workspace</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="err">‘</span><span class="no">John</span><span class="err">’</span><span class="p">,</span> <span class="ss">workspace</span><span class="p">:</span> <span class="n">office</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">stub</span><span class="p">(</span><span class="ss">:office</span><span class="p">)</span><span class="o">.</span><span class="n">language</span> <span class="p">{</span> <span class="n">english</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;has a language&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">default_language</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">english</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bogus will check that <code>office.language</code> is an actual method and that it takes the number of parameters we send. In this way we can have the benefits of stubbing and mocking without the drawbacks. I highly recommend that you try it in your project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Nested Recursive Directives in Angular]]></title>
    <link href="http://sporto.github.com/blog/2013/06/24/nested-recursive-directives-in-angular/"/>
    <updated>2013-06-24T11:18:00+10:00</updated>
    <id>http://sporto.github.com/blog/2013/06/24/nested-recursive-directives-in-angular</id>
    <content type="html"><![CDATA[<p>I learnt a new trick over the weekend using Angular, how to build a recursive tree of objects using directives. In this post I want to share how to do it.</p>

<p>Let&rsquo;s say that you have some data that looks like this, it can be as deep as you want:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Europe&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">children</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>              <span class="p">{</span>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Italy&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">children</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                      <span class="p">{</span>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Rome&#39;</span> <span class="p">},</span>
</span><span class='line'>                      <span class="p">{</span>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Milan&#39;</span>    <span class="p">}</span>
</span><span class='line'>                  <span class="p">]},</span>
</span><span class='line'>              <span class="p">{</span>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Spain&#39;</span><span class="p">}</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;South America&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">children</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>              <span class="p">{</span>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Brasil&#39;</span>   <span class="p">},</span>
</span><span class='line'>              <span class="p">{</span>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Peru&#39;</span> <span class="p">}</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>And using this data you want to build a tree, e.g.:</p>

<pre><code>Europe
    Italy
        Rome
        Milan
    Spain
South America
    Brasil
    Peru
</code></pre>

<p>So to build something like this you will need some kind of recursive code to loop over all the elements and their children.</p>

<p>Let&rsquo;s start with the html:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html</span> <span class="na">ng-app=</span><span class="s">&#39;APP&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  ...
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;IndexCtrl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  ...
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>First we have a controller &lsquo;IndexCtrl&rsquo; which looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;APP&#39;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;IndexCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">locations</span> <span class="o">=</span> <span class="p">[</span> <span class="p">..</span><span class="k">this</span> <span class="nx">is</span> <span class="nx">the</span> <span class="nx">array</span> <span class="nx">of</span> <span class="nx">locations</span> <span class="nx">shown</span> <span class="nx">above</span> <span class="p">..];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we have <code>$scope.locations</code> pointing to the array of locations we want to render in our tree.</p>

<p>Then we need a directive for rendering a collection, the html for the <strong>collection</strong> looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;IndexCtrl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;collection</span> <span class="na">collection=</span><span class="s">&#39;locations&#39;</span><span class="nt">&gt;&lt;/collection&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This directive takes a <code>collection</code> parameter which are the locations we want to render.</p>

<p>Our directive definition looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;collection&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">restrict</span><span class="o">:</span> <span class="s2">&quot;E&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">replace</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">scope</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">collection</span><span class="o">:</span> <span class="s1">&#39;=&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">template</span><span class="o">:</span> <span class="s2">&quot;&lt;ul&gt;&lt;member ng-repeat=&#39;member in collection&#39; member=&#39;member&#39;&gt;&lt;/member&gt;&lt;/ul&gt;&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>restrict: &lsquo;E&rsquo;</strong> tells angular that we want to apply this directive to any html tags matching <code>collection</code>.</li>
<li><strong>replace: true</strong> tells angular that we want to replace the tag with the content of specified template in the directive.</li>
<li><strong>scope:</strong> creates a new scope for the directive.</li>
<li><strong>collection: &lsquo;=&rsquo;</strong> tells angular to use the <code>collection</code> attribute in the directive and create a variable in the directive scope with the same name, <code>=</code> means that it should be passed as an object.</li>
<li><strong>template: &ldquo;…&rdquo;</strong> is the new html that will be inserted instead of the original tag.</li>
</ul>


<p>Notice the following code in the template:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;member</span> <span class="na">ng-repeat=</span><span class="s">&#39;member in collection&#39;</span> <span class="na">member=</span><span class="s">&#39;member&#39;</span><span class="nt">&gt;&lt;/member&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is another directive, used to render each member of the collection (we use the build-in ng-repeat for looping), in this directive we pass the current member as the <code>member</code> attribute.</p>

<p>The directive for <strong>member</strong> looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;member&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$compile</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">restrict</span><span class="o">:</span> <span class="s2">&quot;E&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">replace</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">scope</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">member</span><span class="o">:</span> <span class="s1">&#39;=&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">template</span><span class="o">:</span> <span class="s2">&quot;&lt;li&gt;&lt;/li&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">angular</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">scope</span><span class="p">.</span><span class="nx">member</span><span class="p">.</span><span class="nx">children</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">element</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;&lt;collection collection=&#39;member.children&#39;&gt;&lt;/collection&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">$compile</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">contents</span><span class="p">())(</span><span class="nx">scope</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>This looks a lot like the <strong>collection</strong> directive, except for the link function. I will explain what is happening here, but before that, let me tell you about my first approach for trying to do this.</p>

<p>The first thing I tried is to simply add the <strong>collection</strong> directive inside the template:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">template</span><span class="o">:</span> <span class="s2">&quot;&lt;li&gt; &lt;collection collection=&#39;member.children&#39;&gt;&lt;/collection&gt;&lt;/li&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But this doesn&rsquo;t work, it throws angular into an endless loop, because it tries to render the collection directive regardless if the member has children or not.</p>

<p>So instead you need to add the <strong>collection</strong> directive manually only if there are children, thus the link function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">link</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//check if this member has children</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">angular</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">scope</span><span class="p">.</span><span class="nx">member</span><span class="p">.</span><span class="nx">children</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// append the collection directive to this element</span>
</span><span class='line'>      <span class="nx">element</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;&lt;collection collection=&#39;member.children&#39;&gt;&lt;/collection&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// we need to tell angular to render the directive</span>
</span><span class='line'>      <span class="nx">$compile</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">contents</span><span class="p">())(</span><span class="nx">scope</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the line <code>$compile(element.contents())(scope);</code>. As the html is appended manually we need to tell angular to re-render the directive.</p>

<p>That is it, <a href="http://jsbin.com/acibiv/3/edit">here is the complete example</a>. Thanks.</p>

<p><strong>Update 2013-12-31</strong>: Please read the comments, there are some good suggestions on how to do this better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sharing Simple Business Logic Between the Client and Front End With Rails]]></title>
    <link href="http://sporto.github.com/blog/2013/06/23/sharing-simple-business-logic-between-the-client-and-front-end-with-rails/"/>
    <updated>2013-06-23T08:26:00+10:00</updated>
    <id>http://sporto.github.com/blog/2013/06/23/sharing-simple-business-logic-between-the-client-and-front-end-with-rails</id>
    <content type="html"><![CDATA[<p>Recently I was trying to find out a way of sharing some business logic between the client and the server. We have a reactive UI where results get calculated as you change values. These are complex formulas we rather not write in both Ruby and JavaScript so we don&rsquo;t have to maintain them in two places.</p>

<p>The easiest solution would have been to make ajax calls to the server with the parameters get the results. But we wanted a UI that reacts immediately so needed to have the code loaded in the browser.</p>

<p>So this a solution I come up with, in summary:</p>

<ul>
<li>Formulas are stored as plain JavaScript</li>
<li>Ruby Models load and use those formulas using V8</li>
<li>The formulas are served to the front end as partials</li>
</ul>


<p>Here is a rundown of what I did step by step. I will use a simple interest formula in this example.</p>

<h2>Storing the formulas</h2>

<p>I needed the formulas to be accessible as partials so I added them in the view folder:</p>

<p>In app/views/formulas/_interest.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">formula</span><span class="p">(</span><span class="nx">principal</span><span class="p">,</span> <span class="nx">rate</span><span class="p">,</span> <span class="nx">years</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">principal</span> <span class="o">*</span> <span class="nx">rate</span> <span class="o">*</span> <span class="nx">years</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Using the formulas in my Ruby models</h2>

<p>In order to run the JavaScript on the server you will need <strong>therubyracer</strong> gem, in Gemfile:</p>

<pre><code>gem 'therubyracer'
</code></pre>

<p>In app/models/contract.rb:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Contract</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">principal</span><span class="p">,</span> <span class="n">rate</span><span class="p">,</span> <span class="n">years</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@principal</span><span class="p">,</span> <span class="vi">@rate</span><span class="p">,</span> <span class="vi">@years</span> <span class="o">=</span> <span class="n">principal</span><span class="p">,</span> <span class="n">rate</span><span class="p">,</span> <span class="n">years</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">interest</span>
</span><span class='line'>      <span class="n">cxt</span> <span class="o">=</span> <span class="ss">V8</span><span class="p">:</span><span class="ss">:Context</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">source</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="s1">&#39;views&#39;</span><span class="p">,</span> <span class="s1">&#39;formulas&#39;</span><span class="p">,</span> <span class="s1">&#39;_interest.js&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cxt</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cxt</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="s2">&quot;formula(</span><span class="si">#{</span><span class="vi">@principal</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="vi">@rate</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="vi">@years</span><span class="si">}</span><span class="s2">)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The JavaScript code is loaded inside the interest method and ran with the provided parameters. In this way the code is accessible as a plain ruby method and only needs to be tested in one place. In my test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;Contract&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:principal</span><span class="p">)</span> <span class="p">{</span> <span class="mi">100</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:rate</span><span class="p">)</span> <span class="p">{</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:years</span><span class="p">)</span> <span class="p">{</span> <span class="mi">5</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:contract</span><span class="p">)</span> <span class="p">{</span> <span class="no">Contract</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">principal</span><span class="p">,</span> <span class="n">rate</span><span class="p">,</span> <span class="n">years</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;returns the right interest&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">contract</span><span class="o">.</span><span class="n">interest</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">250</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Loading the formulas in the front-end</h2>

<p>I couldn&rsquo;t find a way of injecting the JS code into the assets pipeline, so instead I just loaded in a partial that gets loaded in the application layout.</p>

<p>In app/views/layouts/application.html.erb:</p>

<pre><code>&lt;%= render 'formulas/index' %&gt;
</code></pre>

<p>In app/views/formulas/_index.html.erb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">APP</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">formulas</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">formulas</span><span class="p">.</span><span class="nx">interest</span> <span class="o">=</span> <span class="o">&lt;%=</span> <span class="nx">render</span> <span class="s1">&#39;formulas/interest.js&#39;</span> <span class="o">%&gt;</span>
</span><span class='line'>          <span class="p">...</span>
</span><span class='line'>      <span class="p">})(</span><span class="nx">APP</span><span class="p">.</span><span class="nx">formulas</span> <span class="o">||</span> <span class="p">(</span><span class="nx">APP</span><span class="p">.</span><span class="nx">formulas</span> <span class="o">=</span> <span class="p">{}));</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">})(</span><span class="nb">window</span><span class="p">.</span><span class="nx">APP</span> <span class="o">||</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">APP</span> <span class="o">=</span> <span class="p">{}));</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This piece of JavaScript creates a global object APP if not found, then an object formulas inside APP and finally adds my interest formula to APP.formulas.interest.</p>

<h2>Using the formulas in the front end</h2>

<p>Once the formulas are loaded as shown above they can be used as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">APP</span><span class="p">.</span><span class="nx">formulas</span><span class="p">.</span><span class="nx">interest</span><span class="p">(</span><span class="nx">principal</span><span class="p">,</span> <span class="nx">rate</span><span class="p">,</span> <span class="nx">years</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>So this is a way of sharing code between the back and the front end. If you how how could be improved or of a cleaner way altogether I would love to hear about it, maybe some DSL that can be used in both places.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Comparison of Angular, Backbone, CanJS and Ember]]></title>
    <link href="http://sporto.github.com/blog/2013/04/12/comparison-angular-backbone-can-ember/"/>
    <updated>2013-04-12T19:00:00+10:00</updated>
    <id>http://sporto.github.com/blog/2013/04/12/comparison-angular-backbone-can-ember</id>
    <content type="html"><![CDATA[<p>Selecting a JavaScript MVC framework can be hard work. There are so many factors to consider and so many options out there that selecting a framework can be overwhelming. To have an idea of all the possible alternatives have a look at <a href="http://todomvc.com/">TodoMVC</a>.</p>

<p>I have had the opportunity to use four of these frameworks: <a href="http://angularjs.org/">Angular</a>, <a href="http://backbonejs.org/">Backbone</a>, <a href="http://canjs.us/">CanJS</a> and <a href="http://emberjs.com/">Ember</a>. So I decided to create a comparison to help you decide which one to use. I will go through several factors that you might want to consider when choosing one.</p>

<p>To each factor I have assigned a score between 1 and 5. Where 1 is poor and 5 is great. I have tried to be impartial in my comparison, but of course my objectivity is heavily compromised as the scores are based mostly on my personal experience.</p>

<p>
<img src="http://sporto.github.com/images/logos/angular.png" width="160" height="160" title="Angular.js" alt="images">
<img src="http://sporto.github.com/images/logos/backbone.png" width="160" height="160" title="Backbone.js" alt="images">
<img src="http://sporto.github.com/images/logos/can.png" width="160" height="160" title="Can.js" alt="images">
<img src="http://sporto.github.com/images/logos/ember.png" width="160" height="160" title="Ember.js" alt="images">
</p>


<h2>Features</h2>

<p><img src="https://docs.google.com/drawings/d/1idTwF7_uA0g3c1-ObSIfS6f9x_sGqbrWaFXYMXnKZkY/pub?w=247&amp;h=69"></p>

<p>There are really important features a framework should have to provide the necessary foundation to build useful applications. Does it do view bindings? two way bindings? filters? computed properties? dirty attributes? form validation? etc. This can be a very long list. Below is a comparison of what I consider the really important features in a MVC framework:</p>

<table>
<thead>
<tr>
<th>Feature                </th>
<th> Angular </th>
<th> Backbone </th>
<th> CanJS </th>
<th> Ember </th>
</tr>
</thead>
<tbody>
<tr>
<td>Observables            </td>
<td> y       </td>
<td> y        </td>
<td> y     </td>
<td> y     </td>
</tr>
<tr>
<td>Routing                </td>
<td> y       </td>
<td> y        </td>
<td> y     </td>
<td> y     </td>
</tr>
<tr>
<td>View bindings          </td>
<td> y       </td>
<td>          </td>
<td> y     </td>
<td> y     </td>
</tr>
<tr>
<td>Two way bindings       </td>
<td> y       </td>
<td> &ndash;        </td>
<td> y     </td>
<td> y     </td>
</tr>
<tr>
<td>Partial views          </td>
<td> y       </td>
<td> &ndash;        </td>
<td> y     </td>
<td> y     </td>
</tr>
<tr>
<td>Filtered list views    </td>
<td> y       </td>
<td> &ndash;        </td>
<td> y     </td>
<td> y     </td>
</tr>
</tbody>
</table>


<p><strong>Observables</strong>: Objects that can be observed for changes.</p>

<p><strong>Routing</strong>: Pushing changes to the browser url hash and listening for changes to act accordingly.</p>

<p><strong>View bindings</strong>: Using observable objects in views, having the views automatically refresh when the observable object change.</p>

<p><strong>Two way bindings</strong>: Having the view push changes to the observable object automatically, for example a form input.</p>

<p><strong>Partial views</strong>: Views that include other views.</p>

<p><strong>Filtered list views</strong>: Having views that display objects filtered by a certain criteria.</p>

<p><strong>Update 2014-07-08</strong>: As of version 2.0 CanJS now supports two way bindings.</p>

<h3>Scores</h3>

<p>So based on these features my scores are:</p>

<table>
<thead>
<tr>
<th>Angular </th>
<th> Backbone </th>
<th> CanJS </th>
<th> Ember </th>
</tr>
</thead>
<tbody>
<tr>
<td>5       </td>
<td> 2        </td>
<td> 4     </td>
<td> 5 </td>
</tr>
</tbody>
</table>


<p>It is important to note that <strong>Backbone</strong> can do most of this things with a lot of manual code or with the help of plug-ins. But I am only considering the available features in the core framework.</p>

<h2>Flexibility</h2>

<p><img src="https://docs.google.com/drawings/d/1Q-Mkke4HROs9wquvg4Dc9dDpkb_4b4UQT3bE4VBMUD8/pub?w=247&amp;h=69"></p>

<p>There are hundreds of awesome plug-ins and libraries out there that do specialised things. They usually do these things better than what comes bundle with a framework. So it important to be able to integrate these libraries with the chosen MVC framework.</p>

<p><strong>Backbone</strong> is the most flexible framework as it is the one with the less conventions and opinions. You are required to make a lot of decisions when using Backbone.</p>

<p><strong>CanJS</strong> is almost as flexible as Backbone as it allows you to easily integrate other libraries with minimum effort. With CanJS you can even use a totally different rendering engine if you want, I have used <a href="http://rivetsjs.com/">Rivets</a> extensively with CanJS without any issues. Although I recommend using what comes with the framework.</p>

<p><strong>Ember</strong> and <strong>Angular</strong> are still flexible frameworks to some degree but you will find that you could end up fighting the framework if you don&rsquo;t like the way it does certain things. There are some things that you just need to buy into when using Ember or Angular.</p>

<table>
<thead>
<tr>
<th>Angular </th>
<th> Backbone </th>
<th> CanJS </th>
<th> Ember</th>
</tr>
</thead>
<tbody>
<tr>
<td>3       </td>
<td> 5        </td>
<td> 4     </td>
<td> 3</td>
</tr>
</tbody>
</table>


<h2>Learning curve and documentation</h2>

<p><img src="https://docs.google.com/drawings/d/1TyDLWOE3JhitMUfIFlkE8YPjowU6b8rpLNlRUe_2jlM/pub?w=247&amp;h=69"></p>

<h3>Angular</h3>

<p>Angular has a very high wow factor at the beginning. It can do some amazing things &ndash; like two-way bindings &ndash; without having to learn much. And it looks quite easy at first sight. But after you have learnt the very basics it is quite a steep learning curve from there. It is a complex framework with lots of peculiarities. Reading the documentation is not easy as there is a lot of Angular specific jargon and a serious lack of examples.</p>

<h3>Backbone</h3>

<p>The basic of Backbone are quite easy to learn. But soon you find that there are not enough opinions there to know how to best structure your code. You will need to watch or read a few tutorials to learn some best Backbone practices. Also you will find that you will probably need to learn another library on top of Backbone (e.g. <a href="http://marionettejs.com/">Marionette</a> or <a href="http://thoraxjs.org/">Thorax</a>) to get things done. So I don&rsquo;t consider Backbone the easier framework to learn.</p>

<h3>CanJS</h3>

<p>CanJS is in comparison the easiest to learn of the bunch. Just by reading the one page website (<a href="http://canjs.us/">http://canjs.us/</a>) you will know most of what you need to be productive. There is of course more to learn, but I only had the need to reach for help in rare occasions (tutorials, forum, irc).</p>

<h3>Ember</h3>

<p>Ember also has a steep learning curve like Angular, I believe that learning Ember is easier than Angular but it requires a highest learning investment at the beginning to get basic things done. Angular in contrast lets you do some amazing things without learning too much. Ember lacks this early wow factor.</p>

<h3>Scores</h3>

<table>
<thead>
<tr>
<th>Angular </th>
<th> Backbone </th>
<th> CanJS </th>
<th> Ember</th>
</tr>
</thead>
<tbody>
<tr>
<td>2       </td>
<td> 4        </td>
<td> 5     </td>
<td> 3</td>
</tr>
</tbody>
</table>


<h2>Developer productivity</h2>

<p><img src="https://docs.google.com/drawings/d/1NxQUPyy7GRCS3S5i3JtA41yxiG3ylf2es-HgEpF_SQs/pub?w=247&amp;h=69"></p>

<p>After you learn the framework well what really matters is how productive you are with. You know: conventions, magic, doing as much as possible quickly.</p>

<h3>Angular</h3>

<p>Once you know Angular well you be can very productive with it, no doubt about that. It just doesn&rsquo;t get the highest score because I think that Ember has gone a step further in this category.</p>

<h3>Backbone</h3>

<p>Backbone requires you to write a lot of boilerplate code, which I think is totally unnecessary. This is in my opinion a direct threat against developer productivity.</p>

<h3>CanJS</h3>

<p>CanJS neither shines nor disappoints in this area. But due to the low learning curve you can be quite productive with it very early on.</p>

<h3>Ember</h3>

<p>Ember really shines here. Because it is full of strong conventions it does a lot of stuff automagically for you. All you need to do is learn and apply those conventions and Ember will to the right thing.</p>

<h3>Scores</h3>

<table>
<thead>
<tr>
<th>Angular </th>
<th> Backbone </th>
<th> CanJS </th>
<th> Ember</th>
</tr>
</thead>
<tbody>
<tr>
<td>4       </td>
<td> 2        </td>
<td> 4     </td>
<td> 5</td>
</tr>
</tbody>
</table>


<h2>Community</h2>

<p><img src="https://docs.google.com/drawings/d/1JirNlFdiZOtEyCaJ9ICTAUT1t0On6YWcS7sw-EAPD58/pub?w=247&amp;h=69"></p>

<p><strong>How easy is to find help, tutorials and experts?</strong></p>

<p>The <strong>Backbone</strong> community is huge, there is no doubt about that. You can find dozens of tutorials about Backbone, a very active community on StackOverflow and IRC.</p>

<p>The <strong>Angular</strong> and <strong>Ember</strong> communities are pretty big as well. Also lots of tutorial and activity in StackOverflow and IRC, but not as much as Backbone.</p>

<p>The <strong>CanJS</strong> community on the other hand is small in comparison, but fortunately is quite active and helpful. I haven&rsquo;t found the smaller size of the CanJS community to be a liability.</p>

<table>
<thead>
<tr>
<th>Angular </th>
<th> Backbone </th>
<th> CanJS </th>
<th> Ember</th>
</tr>
</thead>
<tbody>
<tr>
<td>4       </td>
<td> 5        </td>
<td> 3     </td>
<td> 4</td>
</tr>
</tbody>
</table>


<h2>Ecosystem</h2>

<p><img src="https://docs.google.com/drawings/d/1F61JwcjmqQYpjf0QZLu4C-qWVMzmQWfKMM9cGzmlnsw/pub?w=224&amp;h=83"></p>

<p><strong>Is there an ecosystem of plug-ins and libraries?</strong></p>

<p>Here again <strong>Backbone</strong> beats the others hands down. There are tons of plug-ins for it. The <strong>Angular</strong> ecosystem is getting quite interesting as well with things like <a href="http://angular-ui.github.com/">Angular UI</a>. I think that the <strong>Ember</strong> ecosystem is less developed but it should get better due to Ember&rsquo;s popularity. <strong>CanJS</strong> has the smallest ecosystem if any.</p>

<table>
<thead>
<tr>
<th>Angular </th>
<th> Backbone </th>
<th> CanJS </th>
<th> Ember</th>
</tr>
</thead>
<tbody>
<tr>
<td>4       </td>
<td> 5        </td>
<td> 2     </td>
<td> 4</td>
</tr>
</tbody>
</table>


<h2>Size</h2>

<p><img src="https://docs.google.com/drawings/d/15tEa6aHRhCtDiliHQ3KHGFzgVNilvmirHCnTbe3HRQY/pub?w=258&amp;h=68"></p>

<p>This might be an important consideration, specially if you are doing mobile development.</p>

<h3>Size library alone (no dependecies, just min)</h3>

<table>
<thead>
<tr>
<th>Angular </th>
<th> Backbone </th>
<th> CanJS </th>
<th> Ember</th>
</tr>
</thead>
<tbody>
<tr>
<td>80k     </td>
<td> 18k      </td>
<td> 33k   </td>
<td> 141k</td>
</tr>
</tbody>
</table>


<p><strong>Backbone</strong> is the smallest and people often point to this fact. But this is not the end of the story.</p>

<h3>Size with dependencies</h3>

<p>At 80k <strong>Angular</strong> is the only library of the bunch that doesn&rsquo;t require extra libraries to work.</p>

<p>However all the other need other libraries to work:</p>

<p><strong>Backbone</strong> needs at least <strong><a href="http://underscorejs.org/">Underscore</a></strong> and <strong><a href="http://zeptojs.com/">Zepto</a></strong>. You can use the mini-templates in underscore for rendering views, but most of the time you will want to use a nicer template engine like <strong><a href="https://github.com/janl/mustache.js">Mustache</a></strong>. This is <strong>61K</strong>.</p>

<p><strong>CanJS</strong> needs at least <strong>Zepto</strong>. This is <strong>57K</strong>.</p>

<p><strong>Ember</strong> needs <strong><a href="http://jquery.com/">jQuery</a></strong> and <strong><a href="http://handlebarsjs.com/">Handlebars</a></strong>. This is <strong>269K</strong>.</p>

<table>
<thead>
<tr>
<th>Angular </th>
<th> Backbone </th>
<th> CanJS </th>
<th> Ember</th>
</tr>
</thead>
<tbody>
<tr>
<td>80k     </td>
<td> 61k      </td>
<td> 57k   </td>
<td> 269k</td>
</tr>
</tbody>
</table>


<h3>Scores</h3>

<table>
<thead>
<tr>
<th>Angular </th>
<th> Backbone </th>
<th> CanJS </th>
<th> Ember</th>
</tr>
</thead>
<tbody>
<tr>
<td>4       </td>
<td> 5        </td>
<td> 5     </td>
<td> 2</td>
</tr>
</tbody>
</table>


<h2>Performance</h2>

<p><img src="https://docs.google.com/drawings/d/1Es5A8jSWVS6JXfTG-_F8bn4z-mdSAsGGGh9D9OoHOJM/pub?w=247&amp;h=69"></p>

<p>I don&rsquo;t consider performance to be a critical factor on choosing a framework because they are all performant enough for most of the things they will be used for. But this of course depends on what you are doing with it. If you are building a game performance should be a big consideration.</p>

<p>I have seen and made many performance tests with these libraries e.g. <a href="http://jsperf.com/angular-vs-knockout-vs-ember/118">this one</a>. But I am not totally convinced on the reliability of these tests. It is really hard to be sure that the test is really testing the right things and in the right way.</p>

<p>However, from what I have seen and read <strong>CanJS</strong> seems to have the edge when it comes to performance, specially in rendering view bindings. On the other hand I believe that <strong>Angular</strong> is the less performant based on the fact that it does dirty checking of objects. This cannot possibly be as performant as the others. <a href="http://stackoverflow.com/questions/9682092/databinding-in-angularjs/9693933#9693933">See this</a>.</p>

<h3>Scores</h3>

<table>
<thead>
<tr>
<th>Angular </th>
<th> Backbone </th>
<th> CanJS </th>
<th> Ember</th>
</tr>
</thead>
<tbody>
<tr>
<td>3       </td>
<td> 4        </td>
<td> 5     </td>
<td> 4</td>
</tr>
</tbody>
</table>


<h2>Maturity</h2>

<p><img src="https://docs.google.com/drawings/d/1u9ynjn6jbQqdITYHYJVBzYv1WLttguq7G_MrRim5M8E/pub?w=247&amp;h=69"></p>

<p>Is this a mature framework, has it been proven in production, are there many website using it?</p>

<p><strong>Backbone</strong> has a ton of websites built with it. Its code base hasn&rsquo;t had major changes in the lasts two year which is a great thing from the maturity perspective.</p>

<p>Although <strong>Ember</strong> is not that new, it has had major changes along the way, just reaching a stable form in the last couple of months. So at this time I don&rsquo;t consider it to be a mature framework.</p>

<p><strong>Angular</strong> seems more stable and proven than Ember. But not as much as Backbone.</p>

<p><strong>CanJS</strong> may seem like an unproven solution because you cannot find a ton of site built with it. But CanJS comes with a lot more backing than what you first perceive. CanJS is an extraction of <strong><a href="http://javascriptmvc.com/">JavaScriptMVC</a></strong> a library that has been around since 2008 and has lots of experience build in.</p>

<table>
<thead>
<tr>
<th>Angular </th>
<th> Backbone </th>
<th> CanJS </th>
<th> Ember</th>
</tr>
</thead>
<tbody>
<tr>
<td>4       </td>
<td> 5        </td>
<td> 4     </td>
<td> 3</td>
</tr>
</tbody>
</table>


<h3>Memory leak safety</h3>

<p>This is an important consideration if you are building single page apps that are intended to  stay open for a long time. You don’t want your application to leak memory, this can be a real problem. Unfortunately this can happen quite easily, specially if you are creating listeners for DOM events yourself.</p>

<p><strong>Angular</strong>, <strong>CanJS</strong> and <strong>Ember</strong> will deal with this effectively as long as you follow their best practices. <strong>Backbone</strong> on the other hand requires you to do this work manually in a teardown method.</p>

<table>
<thead>
<tr>
<th>Angular </th>
<th> Backbone </th>
<th> CanJS </th>
<th> Ember</th>
</tr>
</thead>
<tbody>
<tr>
<td>5       </td>
<td> 3        </td>
<td> 5     </td>
<td> 5</td>
</tr>
</tbody>
</table>


<h2>Testability</h2>

<p><strong>How easy is to test you code?</strong>
The keys to have great testable code are <strong>modularity</strong> (have small pieces that can be tested in isolation) and <strong>dependency injection</strong> (being able to change dependencies in your tests).</p>

<p>You can do this with any of the frameworks if you learn the right patterns, but it is not easy and it requires you to get out of your way to apply them.</p>

<p>Modularity and dependency injection are core features of <strong>Angular</strong>, it actively discourages you from doing things in any other way. This usually leads to code that is easier to test. Because of this I consider Angular to has an advantage in this area.</p>

<table>
<thead>
<tr>
<th>Angular </th>
<th> Backbone </th>
<th> CanJS </th>
<th> Ember</th>
</tr>
</thead>
<tbody>
<tr>
<td>5       </td>
<td> 4        </td>
<td> 4     </td>
<td> 4</td>
</tr>
</tbody>
</table>


<p><strong>Update 2013-05-08</strong>: Updated testability to explain better the Angular approach.</p>

<h2>Personal taste</h2>

<p>This is probably one of the biggest factors when choosing a library.</p>

<ul>
<li>Do you like declarative html? &ndash;> Angular</li>
<li>Do you like using a template engine? &ndash;> Backbone, Can and Ember</li>
<li>Do you like an opinionated framework? &ndash;> Ember</li>
<li>Do you want a framework that stick closely to the original <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">SmallTalk MVC</a> pattern? &ndash;> None here, maybe CanJS is the closest.</li>
<li>Do you want to use what seems cool at the moment? &ndash;> Ember, Angular</li>
</ul>


<p>There is no way to score this.</p>

<h2>Tally</h2>

<p>Well, putting all together this is my tally. Remember this is just my opinion, please let me know if you think I have scored a library really wrong.</p>

<iframe width="100%" height="600" src="http://jsfiddle.net/sporto/5JVxh/embedded/result" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>If you put the same weight to every factor it is a tight competition, there are no clear winners or losers. So I guess it all comes down to personal taste or how much weight you apply to each particular factor.</p>

<h2>A note about Backbone (Impartiality ends here)</h2>

<p>I have tried to stay impartial during my post but I cannot finish it without sharing my current opinion about Backbone.</p>

<p>Backbone was a great library two years ago, but I am convinced that <strong>there are better things now</strong>. I believe that many people choose Backbone just because of its popularity, it is a vicious circle.</p>

<p>Backbone trumps ultimate flexibility over developer convenience. But I think that it has traded too much, as it seriously lacks features and developer productivity. Yes, there are lots of plug-ins to compensate for this, but then you will be learning Backbone and something else on top.</p>

<p>Backbone can also be very tempting because of its big community and the ecosystem, but this advantage will disappear as the other frameworks become more popular.</p>

<p>Because of this I strongly feel that you should think twice before choosing Backbone for your next project.</p>

<p><strong>Update 2013-04-20</strong>: Added testability.
<strong>Update 2013-04-18</strong>: Made it clear that the last section is just my opinion. Removed the inflammatory &ldquo;It is time to move on&rdquo; statement.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Plain English Guide to JavaScript Prototypes]]></title>
    <link href="http://sporto.github.com/blog/2013/02/22/a-plain-english-guide-to-javascript-prototypes/"/>
    <updated>2013-02-22T10:21:00+11:00</updated>
    <id>http://sporto.github.com/blog/2013/02/22/a-plain-english-guide-to-javascript-prototypes</id>
    <content type="html"><![CDATA[<p>When I first started learning about JavaScript object model my reaction was of horror and disbelief. I was totally puzzled by its prototype nature as it was my first encounter with a prototype based language. I didn&rsquo;t help that JavaScript has a unique take on prototypes as it adds the concept of <strong>function constructors</strong>. I bet that many of you have had similar experience.</p>

<p>But as I used JavaScript more I didn&rsquo;t just learn to understand its object model but also started love parts of it. Thanks to JavaScript I have find out the elegance and flexibility of prototypes languages. I am now quite fond of prototype languages because they have a simpler and more flexible object model than class based languages.</p>

<h2>Prototypes in Javascript</h2>

<p>Most guides / tutorials start explaining JavaScript objects by going directly to ‘<strong>constructor functions</strong>’, I think this is a mistake, as they introduce a fairly complex concept early on making Javascript look difficult and confusing from the start. Let&rsquo;s leave this for later. First let&rsquo;s start with the basics of prototypes.</p>

<h2>Prototype chains (aka prototype inheritance)</h2>

<p>Every object in Javascript has a <strong>prototype</strong>. When a messages reaches an object, JavaScript will attempt to find a property in that object first, if it cannot find it then the message will be sent to the object&rsquo;s prototype and so on. This works just like single parent inheritance in a class based language.</p>

<p><img src="https://docs.google.com/drawings/d/1NdiIkHd9Cg2j6W4QcJ1X3DEhGXD2gacMXRuURcoE5T4/pub?w=960&amp;h=720"></p>

<p>Prototype inheritance chains can go as long as you want. But in general it is not a good idea to make long chains as your code can get difficult to understand and maintain.</p>

<h2>The __proto__ object</h2>

<p>To understand prototype chains in JavaScript there is nothing as simple as the <strong>__proto__</strong> property. Unfortunately <strong>__proto__</strong> is not part of the standard interface of JavaScript, not at least until ES6. So you shouldn&rsquo;t use it in production code. But anyway it makes explaining prototypes easy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// let&#39;s create an alien object</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">alien</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">kind</span><span class="o">:</span> <span class="s1">&#39;alien&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// and a person object</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">kind</span><span class="o">:</span> <span class="s1">&#39;person&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// and an object called &#39;zack&#39;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">zack</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// assign alien as the prototype of zack</span>
</span><span class='line'><span class="nx">zack</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">alien</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// zack is now linked to alien</span>
</span><span class='line'><span class="c1">// it &#39;inherits&#39; the properties of alien</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">zack</span><span class="p">.</span><span class="nx">kind</span><span class="p">);</span> <span class="c1">//=&gt; ‘alien’</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// assign person as the prototype of zack</span>
</span><span class='line'><span class="nx">zack</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">person</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// and now zack is linked to person</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">zack</span><span class="p">.</span><span class="nx">kind</span><span class="p">);</span> <span class="c1">//=&gt; ‘person’</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the <strong>__proto__</strong> property is very straightforward to understand and use. Even if we shouldn&rsquo;t use <strong>__proto__</strong> in production code, I think that these examples give the best foundation to understand the JavaScript object model.</p>

<p>You can check that one object is the prototype of another by doing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">alien</span><span class="p">.</span><span class="nx">isPrototypeOf</span><span class="p">(</span><span class="nx">zack</span><span class="p">))</span>
</span><span class='line'><span class="c1">//=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Prototype lookups are dynamic</h3>

<p>You can add properties to the prototype of an object at any time, the prototype chain lookup will find the new  property as expected.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">zack</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="nx">zack</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">person</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// zack doesn&#39;t respond to kind at this point</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">zack</span><span class="p">.</span><span class="nx">kind</span><span class="p">);</span> <span class="c1">//=&gt; undefined</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// let&#39;s add kind to person</span>
</span><span class='line'><span class="nx">person</span><span class="p">.</span><span class="nx">kind</span> <span class="o">=</span> <span class="s1">&#39;person&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// now zack responds to kind</span>
</span><span class='line'><span class="c1">// because it finds &#39;kind&#39; in person</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">zack</span><span class="p">.</span><span class="nx">kind</span><span class="p">);</span> <span class="c1">//=&gt; &#39;person&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>New / updated properties are assigned to the object, not to the prototype</h3>

<p>What happens if you update a property that already exists in the prototype? Let&rsquo;s see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">kind</span><span class="o">:</span> <span class="s1">&#39;person&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">zack</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="nx">zack</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">person</span>
</span><span class='line'>
</span><span class='line'><span class="nx">zack</span><span class="p">.</span><span class="nx">kind</span> <span class="o">=</span> <span class="s1">&#39;zack&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">zack</span><span class="p">.</span><span class="nx">kind</span><span class="p">);</span> <span class="c1">//=&gt; &#39;zack&#39;</span>
</span><span class='line'><span class="c1">// zack now has a &#39;kind&#39; property</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">kind</span><span class="p">);</span> <span class="c1">//=&gt; &#39;person&#39;</span>
</span><span class='line'><span class="c1">// person has not being modified</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the property &lsquo;kind&rsquo; now exists in both person and zack.</p>

<h2>Object.create</h2>

<p>As explained before <strong>__proto__</strong> is not a well supported way of assigning prototypes to objects. So the next simplest way is using <strong>Object.create()</strong>. This is available in ES5, but old browsers / engines can be shimmed using this <a href="https://github.com/kriskowal/es5-shim">es5-shim</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">kind</span><span class="o">:</span> <span class="s1">&#39;person&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creates a new object which prototype is person</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">zack</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">zack</span><span class="p">.</span><span class="nx">kind</span><span class="p">);</span> <span class="c1">// =&gt; ‘person’</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can pass an object to Object.create to add specific properties for the new object</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">zack</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="p">{</span><span class="nx">age</span><span class="o">:</span> <span class="p">{</span><span class="nx">value</span><span class="o">:</span>  <span class="mi">13</span><span class="p">}</span> <span class="p">});</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">zack</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span> <span class="c1">// =&gt; ‘13’</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, the object you need to pass is a bit convoluted, but that is the way it is. See the docs <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/create">here</a>.</p>

<h3>Object.getPrototype</h3>

<p>You can get the prototype of an object using Object.getPrototypeOf</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">zack</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">zack</span><span class="p">);</span> <span class="c1">//=&gt; person</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is no such thing as Object.setPrototype.</p>

<h2>Constructor Functions</h2>

<p><strong>Constructor functions</strong> are the most used way in JavaScript to construct prototype chains. The popularity of <strong>constructor functions</strong> comes from the fact that this was the only original way for constructing types. It is also an important consideration the fact that many engines are highly optimized for constructor functions.</p>

<p>Unfortunately they can get confusing, they are in my opinion one of the main reasons why new comers find JavaScript puzzling, but they are a big part of the language and we need to understand them well.</p>

<h3>Functions as constructors</h3>

<p>In JavaScript you create an instance of a function like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Foo</span><span class="p">(){}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//foo is now an instance of Foo</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span> <span class="k">instanceof</span> <span class="nx">Foo</span> <span class="p">)</span> <span class="c1">//=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>In essence functions when used with the keyword <strong>new</strong> behave like factories, meaning that they create new objects. The new object they create is linked to the function by its prototype, more on this later. So in JavaScript we call this an <strong>instance</strong> of the function.</p>

<h3>&lsquo;this&rsquo; is assigned implicitly</h3>

<p>When we use &lsquo;<strong>new</strong>&rsquo;, JavaScript injects an implicit reference to the new object being created in the form of the ‘<strong>this</strong>’ keyword. It also returns this reference implicitly at the end of the function.</p>

<p>When we do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">kind</span> <span class="o">=</span> <span class="err">‘</span><span class="nx">foo</span><span class="err">’</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">();</span> 
</span><span class='line'><span class="nx">foo</span><span class="p">.</span><span class="nx">kind</span> <span class="c1">//=&gt; ‘foo’</span>
</span></code></pre></td></tr></table></div></figure>


<p>Behind the scenes it is like doing something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="k">this</span> <span class="o">=</span> <span class="p">{};</span> <span class="c1">// this is not valid, just for illustration</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">kind</span> <span class="o">=</span> <span class="err">‘</span><span class="nx">foo</span><span class="err">’</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But keep in mind that the implicit &lsquo;<strong>this</strong>&rsquo; is only assigned to a new object when using &lsquo;<strong>new</strong>&rsquo;. If you forget &lsquo;<strong>new</strong>&rsquo; keyword then &lsquo;<strong>this</strong>&rsquo; will be the global object. Of course forgetting <strong>new</strong> is a cause of multiple bugs, so don&rsquo;t forget <strong>new</strong>.</p>

<p>One convention that I like is capitalizing the first letter of a function when it is intented to be used as a function constructor, so you now straightaway to you are missing the <strong>new</strong> keyword.</p>

<h3>The &lsquo;function prototype&rsquo;</h3>

<p>Every function in JavaScript has a special property called ‘<strong>prototype</strong>’.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Foo</span><span class="p">(){</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span>
</span></code></pre></td></tr></table></div></figure>


<p>As confusing as it may sound, this ‘<strong>prototype</strong>’ property is not the real prototype (<strong>__proto__</strong>) of the function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Foo</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">//=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>This of course generates a lot of confusion as people use the term &lsquo;<strong>prototype</strong>&rsquo; to refer to different things. I think that a good clarification is to always refer to the special &lsquo;<strong>prototype</strong>&rsquo; property of functions as &lsquo;<strong>the function prototype</strong>&rsquo;, never just &lsquo;<strong>prototype</strong>&rsquo;.</p>

<p>The ‘<strong>prototype</strong>’ property points to the object that will be asigned as the prototype of instances created with that function when using &lsquo;<strong>new</strong>&rsquo;. Confusing? This is easier to explain with an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// the function person has a prototype property</span>
</span><span class='line'><span class="c1">// we can add properties to this function prototype</span>
</span><span class='line'><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">kind</span> <span class="o">=</span> <span class="err">‘</span><span class="nx">person</span><span class="err">’</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// when we create a new object using new</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">zack</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="err">‘</span><span class="nx">Zack</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// the prototype of the new object points to person.prototype</span>
</span><span class='line'><span class="nx">zack</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">==</span> <span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">//=&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in the new object we have access to properties defined in Person.prototype</span>
</span><span class='line'><span class="nx">zack</span><span class="p">.</span><span class="nx">kind</span> <span class="c1">//=&gt; person</span>
</span></code></pre></td></tr></table></div></figure>


<p>That is mostly everything there is to know about the JavaScript object model. Understanding how <strong>__proto__</strong> and <strong>function.prototype</strong> are related will give you countless hours of joy and satisfaction, or maybe not.</p>

<p>Mistakes, confusing? Let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Impressions on RethinkDB]]></title>
    <link href="http://sporto.github.com/blog/2013/02/02/some-impressions-on-rethinkdb/"/>
    <updated>2013-02-02T08:52:00+11:00</updated>
    <id>http://sporto.github.com/blog/2013/02/02/some-impressions-on-rethinkdb</id>
    <content type="html"><![CDATA[<p>Tried RethinkDB for a week. Overall it gave me a very good impression.</p>

<ul>
<li>Very easy to setup and run</li>
<li>Setting up sharding and replication is quite simple as well</li>
<li>The composable query language is a big plus. I really like the way I can build queries in my code by adding refinements if I need them. Reminds me of ActiveRecord in Rails.</li>
<li>The admin interface is gorgeus and super useful, but I wish I could save my queries.</li>
<li>The developers are very active in IRC and the forum, they responded all my questions very quickly.</li>
</ul>


<p>Some rough edges I came accross are:</p>

<ul>
<li>Queries that require boolean logic (e.g. ‘where user.id IN (1,2,3) and user.active = 1’ in SQL) are very cumbersome in RethinkDB right now. The good thing is that this is being addressed on the next release.</li>
<li>I manage to send several JavaScript expressions to the server that made RethinkDB spawn a bunch of processes that ate the machine CPU very quickly, making the DB almost unusable, I had to kill RethinkDB several times because of this. It would be nice if RethinkDB will  prevent this.</li>
<li>At the moment you cannot connect instances of RethinkDB on different architectures, e.g. Ubuntu to Mac, 32 bits to 64 bits. Again this is in their list of things to address in the future.</li>
</ul>


<p>At the end of our exploration we ended up with a flat data structure so we reverted back to our established SQL solution. But I look forward to use RethinkDB again soon.</p>

<p><strong>Update July 2013</strong></p>

<p>Since I wrote this post some issues on RethinkDB has already been fixed. I was using rethink 1.5 at the time. Fixed issues are:</p>

<ul>
<li><p>&ldquo;Queries that require boolean logic (e.g. ‘where user.id IN (1,2,3) and user.active = 1’ in SQL)&rdquo; was addressed by the inclusion of array operations in RethinkDB 1.6. The equivalent ReQL command would be either of the following:</p>

<pre><code>  r.table('users').filter(lambda user: r.expr([1,2,3]).contains(user['id']) &amp; (user['active'] == 1))
  r.table('users').filter(lambda user: r.all(r.expr([1,2,3]).contains(user['id']), user['active'] == 1))
</code></pre></li>
<li><p>JavaScript expressions (via the r.js command) have an optional timeout flag so the user can prevent single expressions from taking down the server, since RethinkDB 1.5 (see issue #69: <a href="https://github.com/rethinkdb/rethinkdb/issues/69">https://github.com/rethinkdb/rethinkdb/issues/69</a>)</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asynchronous JS: Callbacks, Listeners, Control Flow Libs and Promises]]></title>
    <link href="http://sporto.github.com/blog/2012/12/09/callbacks-listeners-promises/"/>
    <updated>2012-12-09T16:59:00+11:00</updated>
    <id>http://sporto.github.com/blog/2012/12/09/callbacks-listeners-promises</id>
    <content type="html"><![CDATA[<p>When it comes to dealing with <strong>asynchronous</strong> development in JavaScript there are many tool you can use. This post explains four of these tools and what their advantages are. These are Callbacks, Listeners, Control Flow Libraries and Promises.</p>

<h3>Example Scenario</h3>

<p>To illustrate the use of these four tools, let&rsquo;s create a simple example scenario.</p>

<p>Let&rsquo;s say that we want to find some records, then process them and finally return the processed results. Both operations (find and process) are asynchronous.</p>

<div style="height: 180px; overflow:hidden;">
    <img src="http://photos.foter.com/29/why-didnt-you-call-me_l.jpg" style="display: block; width: 100%; margin-top:-120px;">
</div>


<p>Photo credit: bitzcelt / Foter / CC BY-NC-ND</p>

<h2>Callbacks</h2>

<p>Let&rsquo;s start with callback pattern, this is the most basic and the best known pattern to deal with async programming.</p>

<p>A callback looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">finder</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">..</span><span class="k">do</span> <span class="nx">something</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the callback pattern we call a function that will do the asynchronous operation. One of the parameters we pass is a function that will be called when the operation is done.</p>

<h3>Setup</h3>

<p>In order to illustrate how they work we need a couple of functions that will find and process the records. In the real world these functions will make an AJAX request and return the results, but for now let&rsquo;s just use timeouts.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">finder</span><span class="p">(</span><span class="nx">records</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">records</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">cb</span><span class="p">(</span><span class="nx">records</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">processor</span><span class="p">(</span><span class="nx">records</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">records</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">cb</span><span class="p">(</span><span class="nx">records</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using the callbacks</h3>

<p>The code that consumes these functions looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">finder</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">records</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">processor</span><span class="p">(</span><span class="nx">records</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">records</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">records</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We call the first function, passing a callback. Inside this callback we call the second function passing another callback.</p>

<p>These nested callbacks can be written more clearly by passing a reference to another function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">onProcessorDone</span><span class="p">(</span><span class="nx">records</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">records</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">onFinderDone</span><span class="p">(</span><span class="nx">records</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">processor</span><span class="p">(</span><span class="nx">records</span><span class="p">,</span> <span class="nx">onProcessorDone</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">finder</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="nx">onFinderDone</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In both case the console log above with log [1,2,3,4,5,6]</p>

<p>Working example here:</p>

<iframe style="width: 100%; height: 300px" frameborder="0" seamless="seamless" src="http://jsfiddle.net/jjzbr/embedded/js,result/light/"></iframe>


<h3>Pros</h3>

<ul>
<li>They are a very well know pattern, so they are familiar thus easy to understand.</li>
<li>Very easy to implement in your own libraries / functions.</li>
</ul>


<h3>Cons</h3>

<ul>
<li>Nested callbacks will form the infamous pyramid of doom as shown above, which can get hard to read when you have multiple nested levels. But this is quite easy to fix by splitting the functions also as shown above.</li>
<li>You can only pass one callback for a given event, this can be a big limitation in many cases.</li>
</ul>


<div style="height: 150px; overflow:hidden;">
    <img src="http://photos.foter.com/66/summer-sound-large-view_l.jpg" style="display: block; width: 100%;">   
</div>


<p>Photo credit: Brandon Christopher Warren / Foter / CC BY-NC</p>

<h2>Listeners</h2>

<p>Listeners are also a well known pattern, mostly made popular by jQuery and other DOM libraries. A Listener might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">finder</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;done&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">records</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">..</span><span class="k">do</span> <span class="nx">something</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We call a function on an object that adds a listener. In that function we pass the name of the event we want to listen to and a callback function. &lsquo;on&rsquo; is one of many common name for this function, other common names you will come across are &lsquo;bind&rsquo;, &lsquo;listen&rsquo;, &lsquo;addEventListener&rsquo;, &lsquo;observe&rsquo;.</p>

<h3>Setup</h3>

<p>Let&rsquo;s do some setup for a listener demonstration. Unfortunately the setup needed is a bit more involving than in the callbacks example.</p>

<p>First we need a couple of objects that will do the work of finding and processing the records.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">finder</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">run</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">records</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">records</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>           <span class="nx">self</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;done&#39;</span><span class="p">,</span> <span class="p">[</span><span class="nx">records</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">processor</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">run</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">records</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">records</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">self</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;done&#39;</span><span class="p">,</span> <span class="p">[</span><span class="nx">records</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that they are calling a method <strong>trigger</strong> when the work is done, I will add this method to these objects using a mix-in. Again &lsquo;trigger&rsquo; is one of the names you will come across, others common names are &lsquo;fire&rsquo; and &lsquo;publish&rsquo;.</p>

<p>We need a mix-in object that has the listener behaviour, in this case I will just lean on jQuery for this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">eventable</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">on</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">cb</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">trigger</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">trigger</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then apply the behaviour to our finder and processor objects:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">finder</span><span class="p">,</span> <span class="nx">eventable</span><span class="p">);</span>
</span><span class='line'> <span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">processor</span><span class="p">,</span> <span class="nx">eventable</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Excellent, now our objects can take listeners and trigger events.</p>

<h3>Using the listeners</h3>

<p>The code that consumes the listeners is simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">finder</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;done&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">records</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">processor</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="nx">records</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">processor</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;done&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">records</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">records</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">finder</span><span class="p">.</span><span class="nx">run</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again the console run will output [1,2,3,4,5,6]</p>

<p>Working example here:</p>

<iframe style="width: 100%; height: 300px" frameborder="0" seamless="seamless" src="http://jsfiddle.net/FYBjc/embedded/js,result/light/"></iframe>


<h3>Pros</h3>

<ul>
<li>This is another well understood pattern.</li>
<li>The big advantage is that you are not limited to one listener per object, you can add as many listeners as you want. E.g.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">finder</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;done&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">records</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">..</span> <span class="k">do</span> <span class="nx">something</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;done&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">records</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">..</span> <span class="k">do</span> <span class="nx">something</span> <span class="k">else</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Cons</h3>

<ul>
<li>A bit more difficult to setup than callbacks in your own code, you will probably want to use a library e.g. jQuery, <a href="https://github.com/fat/bean">bean.js</a>.</li>
</ul>


<div style="height: 150px; overflow:hidden;">
    <img src="http://foter.com/image/display/1036313/495x371/" style="display: block; width: 100%; margin-top: -50px;">
</div>


<p>Photo credit: Nod Young / Foter / CC BY-NC-SA</p>

<h2>A Flow Control Library</h2>

<p>Flow control libraries are also a very nice way to deal with asynchronous code. One I particularly like is <a href="https://github.com/caolan/async">Async.js</a>.</p>

<p>Code using Async.js looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">async</span><span class="p">.</span><span class="nx">series</span><span class="p">([</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(){</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(){</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Setup (Example 1)</h3>

<p>Again we need a couple of functions that will do the work, as in the other examples these functions in the real world will probably make an AjAX request and return the results. For now let&rsquo;s just use timeouts.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">finder</span><span class="p">(</span><span class="nx">records</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">records</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">records</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">processor</span><span class="p">(</span><span class="nx">records</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">records</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">records</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>The Node Continuation Passing Style</h4>

<p>Note the style used in the callbacks inside the functions above.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">records</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first argument in the callback is null if no error occurs; or the error if one occurs. This is a common pattern in Node.js libraries and Async.js uses this pattern. By using this style the flow between Async.js and the callbacks becomes super simple.</p>

<h3>Using Async</h3>

<p>The code that will consume these functions looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">async</span><span class="p">.</span><span class="nx">waterfall</span><span class="p">([</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">cb</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">finder</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="nx">cb</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">processor</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">records</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="nx">records</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Async.js takes care of calling each function in order after the previous one has finished. Note how we can just pass the &lsquo;processor&rsquo; function, this is because we are using the Node continuation style. As you can see this code is quite minimal and easy to understand.</p>

<p>Working example here:</p>

<iframe style="width: 100%; height: 300px" frameborder="0" seamless="seamless" src="http://jsfiddle.net/GuxRF/embedded/js,result/light/"></iframe>


<h3>Another setup (Example 2)</h3>

<p>Now, when doing front-end development it is unlikely that you will have a library that follows the callback(null, results) signature. So a more realistic example will look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">finder</span><span class="p">(</span><span class="nx">records</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">records</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">cb</span><span class="p">(</span><span class="nx">records</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">500</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">processor</span><span class="p">(</span><span class="nx">records</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">records</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">cb</span><span class="p">(</span><span class="nx">records</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">500</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// using the finder and the processor</span>
</span><span class='line'><span class="nx">async</span><span class="p">.</span><span class="nx">waterfall</span><span class="p">([</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">cb</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">finder</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">records</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">records</span><span class="p">)</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">records</span><span class="p">,</span> <span class="nx">cb</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">processor</span><span class="p">(</span><span class="nx">records</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">records</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">records</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">records</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="nx">records</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>​
It becomes a lot more convoluted but at least you can see the flow going from top to bottom.</p>

<p>Working example here:</p>

<iframe style="width: 100%; height: 300px" frameborder="0" seamless="seamless" src="http://jsfiddle.net/x63BS/embedded/js,result/light/"></iframe>


<h3>Pros</h3>

<ul>
<li>Usually code using a control flow library is easier to understand because it follows a natural order (from top to bottom). This is not true with callbacks and listeners.</li>
</ul>


<h3>Cons</h3>

<ul>
<li>If the signatures of the functions don&rsquo;t match as in the second example then you can argue that the flow control library offers little in terms of readability.</li>
</ul>


<div style="height: 150px; overflow:hidden;">
    <img src="http://photos.foter.com/90/time-heals-nothing_4.jpeg" style="display: block; width: 100%; margin-top:-70px;">
</div>


<p>Photo credit: Helmut Kaczmarek / Foter / CC BY-NC-SA</p>

<h2>Promises</h2>

<p>Finally we get to our final destination. Promises are a very powerful tool, but they are the least understood.</p>

<p>Code using promises may look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">finder</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">records</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">..</span> <span class="k">do</span> <span class="nx">something</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will vary widely depending on the promises library you use, in this case I am using <a href="https://github.com/cujojs/when">when.js</a>.</p>

<h3>Setup</h3>

<p>Out finder and processor functions look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">finder</span><span class="p">(</span><span class="nx">records</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">when</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">records</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">records</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">500</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">processor</span><span class="p">(</span><span class="nx">records</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">when</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">records</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">records</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">500</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each function creates a deferred object and returns a promise. Then it resolves the deferred when the results arrive.</p>

<h3>Using the promises</h3>

<p>The code that consumes these functions looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">finder</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">processor</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">records</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">alert</span><span class="p">(</span><span class="nx">records</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, it is quite minimal and easy to understand. When used like this, promises bring a lot of clarity to your code as they follow a natural flow. Note how in the first callback we can simply pass the &lsquo;processor&rsquo; function. This is because this function returns a promise itself so everything will just flow nicely.</p>

<p>Working example here:</p>

<iframe style="width: 100%; height: 300px" frameborder="0" seamless="seamless" src="http://jsfiddle.net/Rhjbn/embedded/js,result/light/"></iframe>


<p>There is a lot to promises:</p>

<ul>
<li>they can be passed around as regular objects</li>
<li>aggregated into bigger promises</li>
<li>you can add handlers for failed promises</li>
</ul>


<h3>The big benefit of promises</h3>

<p>Now if you think that this is all there is to promises you are missing what I consider the biggest advantage. Promises have a neat trick that neither callbacks, listeners or control flows can do. You can add a listener to promise even when it has already been resolved, in this case that listener will trigger immediately, meaning that you don&rsquo;t have to worry if the event has already happened when you add the listener. This works the same for aggregated promises. Let me show you an example of this:</p>

<iframe style="width: 100%; height: 300px" frameborder="0" seamless="seamless" src="http://jsfiddle.net/8zjGq/embedded/js,result/light/"></iframe>


<p>This is a huge feature for dealing with user interaction in the browser. In complex applications you may not now the order of actions that the user will take, so you can use promises to track use interaction. See this other <a href="http://sporto.github.com/blog/2012/09/22/embracing-async-with-deferreds/">post</a> if interested.</p>

<h3>Pros</h3>

<ul>
<li>Really powerful, you can aggregate promises, pass them around, or add listeners when already resolved.</li>
</ul>


<h3>Cons</h3>

<ul>
<li>The least understood of all these tools.</li>
<li>They can get difficult to track when you have lots of aggregated promises with added listeners along the way.</li>
</ul>


<h2>Conclusion</h2>

<p>That&rsquo;s it! These are in my opinion the four main tools for dealing with asynchronous code. Hopefully I have help you to understand them better and gave you more options for you asynchronous needs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AMD, Is Not One or the Other]]></title>
    <link href="http://sporto.github.com/blog/2012/12/05/amd/"/>
    <updated>2012-12-05T12:43:00+11:00</updated>
    <id>http://sporto.github.com/blog/2012/12/05/amd</id>
    <content type="html"><![CDATA[<p>I am starting to see a pattern in many JS libraries where they are trying to detect the presence of AMD an act accordingly. I think it is great that AMD is getting so much attention but they usual way this is done has a big issue: <strong>It shouldn’t be one or the other.</strong></p>

<p>The pattern usually goes like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="k">if</span> <span class="p">(</span> <span class="k">typeof</span> <span class="nx">define</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">define</span><span class="p">.</span><span class="nx">amd</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="err">…</span> <span class="nx">define</span> <span class="nx">as</span> <span class="nx">AMD</span> <span class="nx">module</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="err">…</span> <span class="nx">attach</span> <span class="nx">as</span> <span class="nx">global</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Problem with this is that if the script is loaded using a common script tag and a AMD loaded (e.g. require) is also present, then it won’t be possible to use the library in the normal way (using the global variable).</p>

<p>You might think that if require is there we should load everything using it, but we have good reasons not to do this. We concatentate and minifiy the most important parts of our JS code, the rest is loaded using require on demand.</p>

<p>So the better way to do this is by attaching the library in many ways as possible:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="c1">// CommonJS module is defined</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">exports</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">module</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Register as a named module with AMD.</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">define</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">define</span><span class="p">(</span><span class="err">‘</span><span class="nx">foo</span><span class="err">’</span><span class="p">,</span> <span class="p">[],</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="nx">foo</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Integrate with $ if defined</span>
</span><span class='line'>  <span class="c1">// or create our own underscore object.</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">jQuery</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="nx">foo</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Pattern for Service Objects in Rails]]></title>
    <link href="http://sporto.github.com/blog/2012/11/15/a-pattern-for-service-objects-in-rails/"/>
    <updated>2012-11-15T21:59:00+11:00</updated>
    <id>http://sporto.github.com/blog/2012/11/15/a-pattern-for-service-objects-in-rails</id>
    <content type="html"><![CDATA[<p>Service Objects in Rails allows to neatly separate the business logic of your application in reausable components. This post describes our implementation of this pattern.</p>

<p>We went through the usual story, we started by putting some business logic in controllers and some in models, then decided that all this logic should go in the models and ended up with very fat models tightly coupled to each other.</p>

<p>So when looking for alternatives patterns for organising the business logic I came across the idea of having separated objects to handle this business logic. Somewhere I saw this pattern labeled as &lsquo;Service objects&rsquo; (SO). This was way before this very interesting post <a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">7 Patterns to Refactor Fat ActiveRecord Models</a></p>

<p>The discussions often involved the Single Responsibility Principle (SLP), so most of the examples shown a class with only one public method on it. At first I totally dismissed this as a kind of functional pattern that didn&rsquo;t fit into the OOP world of Ruby.</p>

<p>But my pain with the fat models made me look into this again. So I decided to give it a try. Since then I have grown very fond of this approach because of the following:</p>

<ul>
<li>As this objects have little code they are easy to reason about</li>
<li>They are very easy to compose (use one inside the other)</li>
<li>They encapsulate the business logic neatly, so you never has to repeat the same logic in different places</li>
<li>They use dependency injection (DI) heavily so they are loosely couple with the rest of the application</li>
<li>Using DI makes it very easy to swap the dependencies in testing</li>
<li>But still they have sensible dependency defaults, I don&rsquo;t see the point in injecting dependencies all the time when in 90% of the cases you just need the defaults</li>
</ul>


<p>Let me show the pattern we are using:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FindInvoicesForClientService</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>      <span class="n">invoices</span> <span class="o">=</span> <span class="n">find_invoices_service</span><span class="o">.</span><span class="p">(</span><span class="n">some_args</span><span class="p">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">find_invoices_service</span>
</span><span class='line'>      <span class="vi">@find_invoices_service</span> <span class="o">||=</span> <span class="no">FindInvoicesService</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">find_invoices_service</span><span class="o">=</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@find_invoices_service</span> <span class="o">=</span> <span class="n">obj</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">service</span> <span class="o">=</span> <span class="no">FindInvoicesForClientService</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">service</span><span class="o">.</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># in test we just swap the dependencies</span>
</span><span class='line'><span class="n">collaborator</span> <span class="o">=</span> <span class="n">double</span><span class="o">.</span><span class="n">as_null_object</span>
</span><span class='line'><span class="n">collaborator</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:call</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="n">invoices</span><span class="p">)</span>
</span><span class='line'><span class="n">service</span><span class="o">.</span><span class="n">find_invoices_service</span> <span class="o">=</span> <span class="n">collaborator</span>
</span></code></pre></td></tr></table></div></figure>


<p>The key points in our version are:</p>

<ul>
<li>the class has only one public method (call)</li>
<li>dependencies are only passed if needed, the class has some sensible defaults that will be used 90% of the time</li>
<li>each dependency injector has its own method instead of a attr_accessor, this is so you can prepare the dependencies if needed</li>
</ul>


<p>This has been a great pattern for us, we have hundreds of these objects that can be easily composed as needed. This pattern has made our code seriously easier to work with.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embracing Async With Deferreds and Promises]]></title>
    <link href="http://sporto.github.com/blog/2012/09/22/embracing-async-with-deferreds/"/>
    <updated>2012-09-22T00:00:00+10:00</updated>
    <id>http://sporto.github.com/blog/2012/09/22/embracing-async-with-deferreds</id>
    <content type="html"><![CDATA[<p>Deferred and promises are a very powerful tool for handling asynchronous events. In this blog post I will explain what they are and when to use them.</p>

<h2>Let&rsquo;s create gretting cards</h2>

<p>As an example let’s say that we are building a UI for a greeting cards making application. Our UI may look something like this:</p>

<p><img src="http://sporto.github.com/images/deferreds/image01.png"></p>

<p>The user can select an animation, select the music and then click next. Our event flow will look like this:</p>

<p><img src="http://sporto.github.com/images/deferreds/image02.png"></p>

<p>In this first case we know everything we need from the beginning. When the user clicks &lsquo;next&rsquo; we know which animation and which music to load. After we are done loading these assets we will show the greeting card. To do this is code we have several options:</p>

<h3>We can count the assets already loaded:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">assetsToLoad</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">loader</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">assetsToLoad</span> <span class="o">--</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">assetsToLoad</span><span class="o">===</span><span class="mi">0</span><span class="p">)</span> <span class="nx">show</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">loader</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">anim</span><span class="p">);</span>
</span><span class='line'><span class="nx">loader</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">music</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code simply keeps a count of assets loaded and when all are loaded it shows the card.</p>

<h3>We can use a library like <a href="https://github.com/caolan/async">Async</a>:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">async</span><span class="p">.</span><span class="nx">parallel</span><span class="p">([</span>
</span><span class='line'>  <span class="nx">loadAnim</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">loadMusic</span><span class="p">,</span>
</span><span class='line'><span class="p">],</span> <span class="nx">show</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We simply tell the library that we want to load these two assets in parallel and then call &lsquo;show&rsquo; when done. The library takes care of all the details for us. A library like this is great but we need to know everything that we need to load at the start.</p>

<h2>Not knowing everything from the beginning</h2>

<p>Now let’s imagine that we don’t want a ‘Next’ button anymore in our UI:</p>

<p><img src="http://sporto.github.com/images/deferreds/image04.png"></p>

<p>Here we just want to show the greeting card automatically after the user has selected the animation and the music. Maybe not the best user experience but it works for our example. We don&rsquo;t know the order in which the user will select the assets.</p>

<p>If we want to stick with the previous way of doing thing (knowing everything at the start). Our event flow will looks something like this:</p>

<p><img src="http://sporto.github.com/images/deferreds/image05.png"></p>

<p>In the above flow we are waiting idle while the user is busy selecting the music. We don&rsquo;t want this, we want to take advantage of this time to load the assets the user has already chosen. So our event flow should look more like this:</p>

<p><img src="http://sporto.github.com/images/deferreds/image06.png"></p>

<p>In this flow we start loading the animation as soon as the user has selected it. While the user is busy selecting the music the animation is loading in the background. As soon as the user select the music we start loading it too in paralell.</p>

<p>A library like as Async is not useful in this case anymore. We can however still count like before or we could use conditional like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">onVideoLoaded</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">checkIfAllLoaded</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">onMusicLoaded</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">checkIfAllLoaded</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">checkIfAllLoaded</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">videoLoaded</span> <span class="o">&amp;&amp;</span> <span class="nx">musicLoaded</span> <span class="o">&amp;&amp;</span> <span class="err">…</span> <span class="p">)</span> <span class="nx">show</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works but it is not very elegant and becomes hard to maintain quickly.</p>

<h2>Deferreds to the rescue</h2>

<p>Here is where Deferreds shine. But let me explain what they are first. In a nutshell a Deferred is contract for an event that will happen in the future. Easier to explain this with some code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// we create a Deferred</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">def</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// we add a listener to the Deferred</span>
</span><span class='line'><span class="c1">// when the Deferred is done then do something</span>
</span><span class='line'><span class="nx">def</span><span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">//… do something</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//… later</span>
</span><span class='line'><span class="c1">// we mark the Deferred as done</span>
</span><span class='line'><span class="c1">// this will trigger the listener added above</span>
</span><span class='line'><span class="nx">def</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We create an Deferred object that accepts listeners like ‘done’. At some point in our application we set this deferreds as done (‘resolve’). This will trigger all the listeners.</p>

<p>There are many Deferred implementations like jQuery (1.5+), <a href="https://github.com/wookiehangover/underscore.deferred">underscore deferreds</a>, <a href="https://github.com/kriszyp/promised-io">promised-IO</a>. My examples are using jQuery but the concepts are pretty much the same for all of them.</p>

<h2>Aggregation</h2>

<p>A deferred can also be aggregated (I will explain promises later):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// We create two deferreds</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">def1</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">def2</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We combine them together using the ‘when’ function. </span>
</span><span class='line'><span class="c1">// This creates a new object (Promise) that is the aggregation of the two Deferreds. </span>
</span><span class='line'><span class="c1">// We add a listener ‘done’ to the aggregated Promise.</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">def1</span><span class="p">,</span> <span class="nx">def2</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">one</span><span class="p">,</span> <span class="nx">two</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">//… do something with one and two;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//… later</span>
</span><span class='line'><span class="nx">def1</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//… even later</span>
</span><span class='line'><span class="nx">def2</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case when def1 and def2 are resolved the listener in the combined Promise will trigger.</p>

<p>So going back to our greeting cards example. To do this:</p>

<p><img src="http://sporto.github.com/images/deferreds/image06.png"></p>

<p>We can simply code it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">animDef</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">musicDef</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">animDef</span><span class="p">,</span> <span class="nx">musicDef</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">show</span><span class="p">();</span>  
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//when the music is loaded</span>
</span><span class='line'><span class="nx">musicDef</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//when the animation is loaded</span>
</span><span class='line'><span class="nx">animDef</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>No conditions, no counting. Quite elegant if you ask me.</p>

<h2>What if it is already resolved?</h2>

<p>Deferreds have another neat trick. Let&rsquo;s say that the user selects the music first and it completely loads before we even start loading the animation.</p>

<p><img src="http://sporto.github.com/images/deferreds/image07.png"></p>

<p>By the time we add our aggregated listener the Deferred for the music has already been resolved:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">animDef</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">musicDef</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//…later</span>
</span><span class='line'><span class="nx">musicDef</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//…even later</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">animDef</span><span class="p">,</span> <span class="nx">musicDef</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">show</span><span class="p">();</span>  
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>No problems! The aggregated listener will still triggers, it knows that the Deferred is already resolved and acts as expected. This is something you cannot with common event listeners!</p>

<h2>Fail and reject</h2>

<p>Deferred can also be rejected as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">def</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">def</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">){</span>
</span><span class='line'>      <span class="c1">//do something</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="c1">//fallback</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//…later, something bad happened</span>
</span><span class='line'><span class="nx">def</span><span class="p">.</span><span class="nx">reject</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives us a way of handling errors and providing fallbacks.</p>

<h2>Promises</h2>

<p>A promise is mostly like a Deferred but it doesn’t provide the methods to resolve and reject it. This is useful when you want to give a reference to the Deferred to another object so it can add listeners but you don&rsquo;t want to give that object the power to resolve the Deferred.</p>

<p>Let&rsquo;s say you have a caller object with code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// create a loader object</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">loader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Loader</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ask the loader to load something</span>
</span><span class='line'><span class="c1">// it receives a promise back</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="nx">loader</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="err">…</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// add listeners to the promise</span>
</span><span class='line'><span class="nx">promise</span><span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span><span class="k">do</span> <span class="nx">something</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This caller receives a Promise from the loader object, it can add listeners to the Promise or aggregate it with other Promises. But it cannot resolve or reject them. Trying to do something like:</p>

<pre><code>promise.resolve();
</code></pre>

<p>will fail.</p>

<p>The code in the loader object will look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">load</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">def</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">def</span><span class="p">.</span><span class="nx">promise</span><span class="p">();</span> <span class="c1">// it returns the promise</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//..later</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">onLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">def</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the def.promise() method which creates the promise. The jQuery ajax methods does exactly this, it gives you a promise back when called.</p>

<p>You can combine promises to you heart content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">promise1</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">animDef</span><span class="p">,</span> <span class="nx">musDef</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">promise2</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">msgDef</span><span class="p">,</span> <span class="nx">bgDef</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="nx">promise1</span><span class="p">,</span> <span class="nx">promise2</span><span class="p">).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="c1">//… do something with anim, music message and background</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using Deferreds you can easily code something like this. Where you have many actions happening at the same time, each without a clear start and ending and depending on each other.</p>

<p><img src="http://sporto.github.com/images/deferreds/image08.png"></p>

<h2>Conclusion</h2>

<p>In conclusion Deferreds are best suited in situations where:</p>

<ul>
<li>You have several actions happening at the same time e.g. loaders</li>
<li>You don’t know where the action starts and when it finishes e.g. user interaction</li>
<li>You have other actions that depend on the completion of multiple other actions</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Experience With Backbone, Ember and CanJS]]></title>
    <link href="http://sporto.github.com/blog/2012/08/18/backbone-ember-canjs/"/>
    <updated>2012-08-18T00:00:00+10:00</updated>
    <id>http://sporto.github.com/blog/2012/08/18/backbone-ember-canjs</id>
    <content type="html"><![CDATA[<p>Before coming to the JavaScript world I was doing Flex development, so I was quite familiar with MVC paradigm in the front-end side of applications.</p>

<p>When I first started using JavaScript I learnt to do things in the usual way of that time &ndash; which is having the DOM as the source of truth. e.g. We will add elements to the DOM and if we wanted to know the length of a collection we will just use jQuery to ask the DOM for how many elements there were.</p>

<p>I soon grew tired of this way of doing things, it was just messy.</p>

<h2>Backbone</h2>

<p><a href="http://backbonejs.org/">Backbone</a> captured a lot of attention when it came up, it was the first MVC framework that looked easy to get into. So I decided to try it. It was a great start, the structure of my code started to resemble a lot more what I was used to in Flex e.g. collections, views, controllers.</p>

<p>But there were many times where I would think &ldquo;What? Do I need to do this myself? Shouldn&rsquo;t Backbone take care of this?&rdquo;. For example when a collection changed the view needed to know and I had to hook all these events myself.</p>

<p>Another thing that was a let down is that there is no build-in way of doing live binding in the views. You have to do this yourself e.g. re-render a view manually when something changes (via events). Also doing nested views was more complex that it needed to be.</p>

<p>Backbone just left me wanting a lot more from an MVC framework. So I decided that Backbone was not my cup of tea, it wasn&rsquo;t really doing enough useful things for me.</p>

<h2>Ember</h2>

<p><a href="http://emberjs.com/">Ember</a> also came up with quite a hype and it looked like the perfect fit for everything I was expecting. It has live binding, a great object model and an excellent template engine.</p>

<p>It takes a while to learn as it deviates quite a bit from the usual way of doing JavaScript, Ember relies heavily on binding instead of events. I got a lot into it, even did a talk about it in my local user group.</p>

<p>I liked it but I wasn&rsquo;t completely happy with it because:</p>

<ul>
<li>It is huge, totally overkill for small projects or mobile apps.</li>
<li>Performance wise it is not that good either, quite slow compared to Backbone. <a href="http://jsfiddle.net/jashkenas/CGSd5/">http://jsfiddle.net/jashkenas/CGSd5/</a></li>
<li>It is hard to debug, when something fails it gives you very obscure error messages that are hard to track back to the source.</li>
<li>It adds scripts tags around elements, which breaks CSS styling in some cases.</li>
<li>It required me to declare lots of small components, so for simple things I ended up with too many objects.</li>
<li>It also force me to declare objects in the global space, I couldn&rsquo;t find a way of not having to do this.</li>
</ul>


<h2>CanJS</h2>

<p>Then came <a href="http://canjs.us/">CanJS</a> (without the hype of the other two), it is a reboot of the venerable JavascriptMVC project. Bitovi has done a great job at making JavascriptMVC a lot more accessible to newcomers.</p>

<p>CanJS looked intriguing, so I decided to use it in my next project. It was a great success for me. It stroked a great balance between Backbone and Ember. The features I like a lot in CanJS are:</p>

<ul>
<li>It is quite small, just a bit bigger than Backbone. Tiny compared to Ember.</li>
<li>It is fast (as fast as Backbone). <a href="http://jsfiddle.net/sporto/Ek9am/">http://jsfiddle.net/sporto/Ek9am/</a></li>
<li>It has live binding out of the box, and they work perfectly well (although I prefer handlebars, I can live with EJS).</li>
<li>It is a lot more general purpose than Backbone and Ember. For example CanJS has an observable object that can be used in a huge variety of situations, not just when doing MVC.</li>
</ul>


<p>CanJS has become my MVC library of choice. I really recommend you give it a go in your next project.</p>

<h2>The future</h2>

<p>I am planning to keep using CanJS in the future, but <a href="http://www.angularjs.org/">Angular</a> looks very appealing, I really like the declarative way of doing things directly in html without having to use templates. I am planning to give Angular a go soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Intuitive Proto Object in JavaScript]]></title>
    <link href="http://sporto.github.com/blog/2011/11/06/the-intuitive-proto-object-in-javascript/"/>
    <updated>2011-11-06T09:25:00+11:00</updated>
    <id>http://sporto.github.com/blog/2011/11/06/the-intuitive-proto-object-in-javascript</id>
    <content type="html"><![CDATA[<p>Javascript is meant to be a prototypical language. But unfortunately it is a half done prototypical language. Internally it works like this but externally it tries to looks like something else. To understand this let&rsquo;s look at the <strong>proto</strong> property.</p>

<p>Take the following code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Animal</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">alive</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">legs</span><span class="o">:</span><span class="mi">4</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">legs</span><span class="o">:</span><span class="mi">2</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">person</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">Animal</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">alive</span><span class="p">);</span>
</span><span class='line'><span class="c1">//true</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is extremely easy to see what is happening here. We have just created a prototype inheritance chain between &lsquo;person&rsquo; and &lsquo;Animal&rsquo;. If you ask for a property or method in &lsquo;person&rsquo; it will be looked up in that object first, if it is not found there it then will be looked up in the prototype.</p>

<p><strong>proto</strong> looks scary because of all the underscores around the name, but in reality it is quite easy and straightforward to understand and use. Unfortunately the <strong>proto</strong> property is an internal properties only exposed by some browsers (e.g. Chrome, Firefox). So it cannot be used safely.</p>

<p>So sadly we are left with this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Animal</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alive</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">legs</span><span class="o">:</span><span class="mi">4</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">legs</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">Animal</span><span class="p">;</span>
</span><span class='line'><span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">alive</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">legs</span><span class="p">);</span> <span class="c1">//2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note what is happening here:</p>

<ul>
<li>We need to create a constructor function</li>
<li>Then we assign &lsquo;Animal&rsquo; as the prototype of that constructor</li>
<li>Then we run the function to get the instance we want</li>
</ul>


<p>This is an extremely convoluted process to get to what we want, which is to have an object that inherits from another.</p>

<h2>Object.create</h2>

<p>There is another alternative which is using Object.create:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Animal</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">alive</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">legs</span><span class="o">:</span><span class="mi">4</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">person</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Animal</span><span class="p">);</span>
</span><span class='line'><span class="nx">person</span><span class="p">.</span><span class="nx">legs</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">alive</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">legs</span><span class="p">);</span> <span class="c1">//2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Object.create makes a new object with the prototype set to the given object. This is heaps better than the function prototype work around. But still using <strong>proto</strong> is a lot more intuitive.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[State Machines Are Awesome]]></title>
    <link href="http://sporto.github.com/blog/2011/10/06/state-machines-are-awesome/"/>
    <updated>2011-10-06T09:29:00+11:00</updated>
    <id>http://sporto.github.com/blog/2011/10/06/state-machines-are-awesome</id>
    <content type="html"><![CDATA[<p>Being mostly a self taught developer, nobody ever taught me what a state machine was. When I finally stumbled upon them I realised I have been missing out by not using them before.</p>

<p>When I first started learning about them I couldn&rsquo;t find a good explanation in plain english. So here is my attempt to explain state machines in a simple way and why you should use them.</p>

<p>The code examples below are in Ruby using the <a href="https://github.com/pluginaweek/state_machine">state_machine</a> gem. But this are general concepts for any language.</p>

<h2>What is a state machine?</h2>

<p>In essence a state machine tracks the state of an object and describes the actions that this object can perform at any given time.</p>

<p>A state machine has several components: states, events and transitions.</p>

<h2>States</h2>

<p>Let&rsquo;s say we have an &lsquo;order&rsquo; object. We could use a state machine to track the state of our order. The order could have the following states:</p>

<ul>
<li>Open</li>
<li>Placed</li>
<li>Held</li>
<li>Cancelled</li>
<li>Shipped</li>
<li>Returned</li>
</ul>


<p>The subject of the state machine can be in only one state at any given  time. The order can either be &lsquo;Held&rsquo; or &lsquo;Shipped&rsquo;. These are the states. And we can have only one.</p>

<p>If we want to have two states at the same time we would need to have two state machine running in parallel.</p>

<h2>Events</h2>

<p>We can define events that our state machine can perform. For example:</p>

<ul>
<li>Create</li>
<li>Cancel</li>
<li>Hold</li>
<li>Ship</li>
<li>Return</li>
</ul>


<p>Not all events can be called at any time, the available events are dependant on the current state of the object.  A state machine manages this logic for us.</p>

<p>In Ruby (using state_machine) we could do something like this:</p>

<pre><code>order.can_cancel? #ask if the order can be cancelled at this time
order.cancel #send the cancel event to the order
</code></pre>

<p>The following diagram shows the state machine flow.</p>

<p><img src="https://docs.google.com/drawings/pub?id=178_CnXn19xnNumvnBY8BxIsJQ245rdoyzvUOwN-MQqM&amp;w=528&amp;h=413"></p>

<p>So as you can see in the diagram there are predetermined paths that the state machine can follow. It can move from the &lsquo;Created&rsquo; state to the &lsquo;Placed&rsquo; state but not to the &lsquo;Shipped&rsquo; state.</p>

<p>The state machine will complain if you try to call an event that is not permitted depending on the current state.</p>

<h2>Transitions</h2>

<p>Finally, when an event is called it may trigger a transition. For example the &lsquo;cancel&rsquo; event could trigger the following transitions:</p>

<ul>
<li>&lsquo;placed&rsquo; to &lsquo;cancelled&rsquo;</li>
<li>&lsquo;held&rsquo; to &lsquo;cancelled&rsquo;</li>
<li>&lsquo;any&rsquo; to &lsquo;cancelled&rsquo;</li>
</ul>


<p>Transitions are useful for triggering processes that should occur in particular cases. For example sending an email when the state of an order changes from &lsquo;placed&rsquo; to &lsquo;cancelled&rsquo;.</p>

<h2>So why you should use state machines?</h2>

<p>If it is not clear already the main reason to user them is because a state machine can manage all the complexity of knowing what events and states are available at any given time.</p>

<p>So, that&rsquo;s my understanding of state machines so far. I am sure I am missing out some stuff but I believe that the basics are here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Hate Tables]]></title>
    <link href="http://sporto.github.com/blog/2011/08/01/dont-hate-tables/"/>
    <updated>2011-08-01T09:30:00+10:00</updated>
    <id>http://sporto.github.com/blog/2011/08/01/dont-hate-tables</id>
    <content type="html"><![CDATA[<p>Recently I was maintaining a project were the original developer did everything using lists to present data in rows and columns like a table.</p>

<p>So to present something like this:</p>

<pre><code>&lt;table&gt;
    &lt;tr&gt;
        &lt;th &gt;Cosher &lt;/th&gt;
        &lt;td&gt;To treat with special fondness.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th style='padding-right:12px;'&gt;Flamboyant &lt;/th&gt;
        &lt;td&gt;strikingly bold or brilliant; showy: flamboyant colors.&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;br /&gt;
</code></pre>

<p>they were using a ul like this:</p>

<pre><code>&lt;ul&gt;
    &lt;li&gt;Cosher &lt;span&gt;To treat with special fondness.&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;Flamboyant&lt;span&gt;strikingly bold or brilliant; showy: flamboyant colors.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>And then styling the list using CSS to make it look like a table.</p>

<p>This is a little less markup than a normal table but what for? It seems to me like the &lsquo;no tables&rsquo; mantra taken to the extreme. This is perfectly appropriate content for a table. And using a table makes better sense because:</p>

<ul>
<li>Developer looking at the code will immediately know what the intention is</li>
<li>The code is easier to maintain because you don&rsquo;t have to fight with the css to make something look like a table when it is not</li>
<li>The display is consistent in any browser</li>
<li>People disabling CSS will still see a table</li>
</ul>


<p>So please use tables when appropriate, don&rsquo;t hate them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding the Bounding Box of an SVG Path in Ruby]]></title>
    <link href="http://sporto.github.com/blog/2011/06/06/finding-the-bounding-box-of-an-svg-path-in-ruby/"/>
    <updated>2011-06-06T09:32:00+10:00</updated>
    <id>http://sporto.github.com/blog/2011/06/06/finding-the-bounding-box-of-an-svg-path-in-ruby</id>
    <content type="html"><![CDATA[<p>Here is a way for finding out the bounding box (left, right, width and height) of an SVG path in Ruby. You will need <a href="http://www.imagemagick.org/">ImageMagick</a> and <a href="http://rmagick.rubyforge.org/">RMagick</a> for this. In Javascript this is quite simple using the getBBox method, but I couldn&rsquo;t find a similar thing in Ruby.</p>

<p>First install ImageMagick if you don&rsquo;t have it already. I like to use Homebrew:</p>

<pre><code>brew install imagemagick
</code></pre>

<p>Then install RMagick</p>

<pre><code>gem install rmagick
</code></pre>

<p>With these two requirements in place you can find the bounding box using a script like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;RMagick&#39;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">def</span> <span class="nf">find_bounding_box</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>      <span class="kp">include</span> <span class="no">Magick</span>  
</span><span class='line'>  
</span><span class='line'>      <span class="c1">#create a drawing object</span>
</span><span class='line'>      <span class="n">drawing</span> <span class="o">=</span> <span class="ss">Magick</span><span class="p">:</span><span class="ss">:Draw</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>      <span class="c1">#create a new image for finding out the offset</span>
</span><span class='line'>      <span class="n">canvas</span> <span class="o">=</span> <span class="no">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1500</span><span class="p">,</span><span class="mi">1000</span><span class="p">)</span> <span class="p">{</span><span class="nb">self</span><span class="o">.</span><span class="n">background_color</span> <span class="o">=</span> <span class="s1">&#39;white&#39;</span> <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>      <span class="c1">#draw the path into the canvas image</span>
</span><span class='line'>      <span class="n">drawing</span><span class="o">.</span><span class="n">path</span> <span class="n">path</span>
</span><span class='line'>      <span class="n">drawing</span><span class="o">.</span><span class="n">draw</span> <span class="n">canvas</span>
</span><span class='line'>  
</span><span class='line'>      <span class="c1">#trim the whitespace of the image</span>
</span><span class='line'>      <span class="n">canvas</span><span class="o">.</span><span class="n">trim!</span>   
</span><span class='line'>  
</span><span class='line'>      <span class="c1">#here is the bounding box information we are looking for</span>
</span><span class='line'>      <span class="p">{</span> <span class="ss">:x</span><span class="o">=&gt;</span> <span class="n">canvas</span><span class="o">.</span><span class="n">page</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="ss">:y</span><span class="o">=&gt;</span><span class="n">canvas</span><span class="o">.</span><span class="n">page</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="ss">:width</span><span class="o">=&gt;</span> <span class="n">canvas</span><span class="o">.</span><span class="n">columns</span><span class="p">,</span> <span class="ss">:height</span><span class="o">=&gt;</span> <span class="n">canvas</span><span class="o">.</span><span class="n">rows</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s test it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">svg_path</span> <span class="o">=</span> <span class="s2">&quot;M555.545,95.489c-9.67,4.589-19.34,9.178-29.01,13.767c9.097,19.235,18.194,38.47,27.291,57.705c9.667-4.598,19.335-9.196,29.002-13.794C573.733,133.941,564.64,114.715,555.545,95.489z&quot;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">bbox</span> <span class="o">=</span> <span class="n">find_bounding_box</span><span class="p">(</span><span class="n">svg_path</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;x=&quot;</span><span class="o">+</span><span class="n">bbox</span><span class="o">[</span><span class="ss">:x</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;y=&quot;</span><span class="o">+</span><span class="n">bbox</span><span class="o">[</span><span class="ss">:y</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;width=&quot;</span><span class="o">+</span><span class="n">bbox</span><span class="o">[</span><span class="ss">:width</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;height=&quot;</span><span class="o">+</span><span class="n">bbox</span><span class="o">[</span><span class="ss">:height</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
